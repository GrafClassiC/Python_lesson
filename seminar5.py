# РЕКУРСИЯ И АЛГОРИТМЫ
"""
Задача:
Найти n-ое число после известных в последовательности фибаначи (а0, а1 ...., an..... где a0 = 0, а1 = 1
0 1 1 2 3 5 8 13 21) седьмое после известных = 21
"""
# n = 7 # получается места(индексы) после 0 1 ( 1 2 3 5 8 13 21)
# # a0 = fibo_p # эти две строки - переименовали наши переменные под решение семинара 
# # a1 = fibo_n #
# fibo_p, fibo_n = 0, 1
# """
# Нижнее подчеркивание _ в данном случае используется как переменная-заполнитель, когда Вам не нужно использовать значение, 
# возвращаемое циклом for.
# В этом коде цикл for _ in range(n): выполняется n раз, но значение переменной _ не используется внутри цикла. 
# Это распространенный способ указать, что Вы не собираетесь использовать возвращаемое значение, но Вам все равно нужно 
# пройти по всем итерациям цикла.
# Использование _ вместо, например, i или index, помогает сделать Ваш код более читабельным и понятным, показывая, 
# что эта переменная не используется в дальнейшем.
# Таким образом, в данном случае цикл for _ in range(n): просто выполняется n раз, не используя значение переменной _.
# """
# for _ in range(n):
#     fibo_p, fibo_n = fibo_n, fibo_p + fibo_n
# print(fibo_n)

"""или решение рекурсией"""


# def func(n, fibo_p=0, fibo_n=1):
#     if n == 0:
#         return fibo_n
#     return func(n-1, fibo_n, fibo_p + fibo_n)
# print(func(n))

"""
Задача:
Хакер Василий получил доступ к классному журналу и хочет заменить свои оценки на максимальные. Написать программу, 
которая заменяет оценка, но наоборот: все на максимальные на минимальные
input:[1, 3, 3, 3, 4]
output:[1, 3, 3, 3, 1]
"""
# scores = [1, 3, 3, 3, 4]
# def change_scores(scores, index=0, max_score=max(scores), min_score=min(scores)):
#     if index < len(scores):
#         if scores[index] == max_score:
#             scores[index] = min_score
#         change_scores(scores, index + 1)
#     return scores
# print(*change_scores(scores))

"""
Задача:
Напишите функцию, которая принимает одно число и проверяет, является ли оно простым.
Простое число имеет два делителя 1 и n(само число) н-р: 2 3 5 7 11 13
input: 5
output: yes
"""

"""Решение циклом"""

# def func_1(n):
#     for el in range(2, n):
#         if n % el == 0:
#             return "no"
#     return "yes"
# print(func_1(13))

"""Решение рекурсией"""
# def func_2(n, el=2)
#     if el < n:
#         if n % el == 0:
#             return "no"
#         return "yes"
# print(func_2(13))

"""
Задача:
Дано натуральное число N и последовательности из N элементов. Требуется вывести эту последовательность в обратном порядке
Примечание - запрещается использовать циклы.
Inpyt: 2-> 3 4
Output: 4 3
"""
"Решение циклом"
# data  = "3 4"
# def func1(data):
#     new_str = ""
#     for elem in reversed(data):
#         new_str += elem
#     return new_str
# print(func1(data))

"Решение рекурсией"

# def func2(data, new_str= ""):
#     if len(data) == 0:
#          return new_str
#     return func2(data[:-1], new_str + data[-1])
# print(func2)
    




