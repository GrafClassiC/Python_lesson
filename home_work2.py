"""
На столе лежат n монеток. Некоторые из монеток лежат вверх решкой, а некоторые – гербом. 
Ваша задача - определить минимальное количество монеток, которые нужно перевернуть, 
чтобы все монетки лежали одной и той же стороной вверх.

Входные данные:

На вход программе подается список coins, где coins[i] равно 0, если i-я монетка лежит гербом вверх, 
и равно 1, если i-я монетка лежит решкой вверх. Размер списка не превышает 1000 элементов.

Выходные данные:

Программа должна вывести одно целое число - минимальное количество монеток, которые нужно перевернуть.
"""
# coins = [0, 1, 0, 1, 1, 0]
# def min_flips_to_unify(coins):
#     # Считаем количество монеток, лежащих гербом вверх и решкой вверх
#     heads = coins.count(0)
#     tails = coins.count(1)
    
#     # Возвращаем минимальное из двух значений, так как нужно перевернуть меньшее количество монеток
#     return min(heads, tails)
# print(min_flips_to_unify(coins))  # Выводит: 3

"""
Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для этого Петя делает две подсказки. 
Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.
Примечание: числа S и P задавать не нужно, они будут передаваться в тестах. В результате вы должны вывести все возможные 
пары чисел X и Y через пробел, такие что X <= Y.
"""
# Используем формулу для решения квадратного уравнения
# x^2 - Sx + P = 0, где S = x + y, P = x * y
# s = 8
# p = 16
# # Вычисляем дискриминант
# D = s**2 - 4*p

# # Проверяем, что дискриминант неотрицателен
# if D < 0:
#     print("Нет решений")
# else:
#     # Вычисляем корни уравнения
#     x1 = (s + D**0.5) / 2
#     x2 = (s - D**0.5) / 2
#     # Проверяем, какой из корней является решением
#     if x1 * x2 == p:
#         print(int(x1), int(x2))


"""
Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числаN.
"""

# n = 16
# i = 1
# while i <= n:
#     print(i)
#     i *= 2
