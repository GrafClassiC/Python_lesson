#print (1,2,3,sep = ',')
# rubles = 10
# kop = 99
# print("У меня есть", rubles, "рублей", kop, "копеек")#или
# print("У меня есть %s рублей %s копеек"%(rubles, kop))

# a = int(input())
# print(a-1,a,a+1,sep='<')

# n = int(input())
# a = n - 1
# b = n + 1
# print(a,n,b,sep="<")

# a = str(input())
# b = str(input())
# c = str(input())
# print(a,b,c,sep="---",end='')

# a=str(input())
# b=str(input())
# c=str(input())
# print(a,b,c, sep="---")
# a, b, c = input().split()
# print(a, b, c, sep = "---")

# a = input()
# print(1,2,3,4,5,sep=a)

# a = str(input())
# print(a,end=' - Сказала она')
# print(5//8)

# n = int(input())
# k = int(input())
# print(k//n)

# a = float(input())
# c = a // 100
# print(int(c%10))
"или" 
# print(int(input()) // 100 % 10)

# a = int(input())
# print(a%10+a//10%10+a//100%100)

# n = int(input())
# a = n // 100
# n = n % 100
# b = n // 20
# n = n % 20
# c = n // 10
# n = n % 10
# d = n // 5
# n = n % 5
# e = n
# print(a+b+c+d+e)

# n = int(input())
# a = n // 1440
# n = n % 1440
# b = n // 60
# n = n % 60
# c = n
# print(b, c)

# n = int(input())
# a = n // 2
# print(a * 2 + 2)

"""h:mm:ss"""
# n = int(input())
# h = (n // 3600) % 24
# n = n % 3600
# mm = n // 60
# n = n % 60
# print(h,':',mm//10,mm%10,':',n//10,n%10,sep="")

# m = 60
# print(m // 59,m % 10,sep="")

# n = int(input())
# n += 1
# print(n)\

# n = float(input())
# n *= 1.5
# print(n)
"""или"""
# print(float(input()) * 1.5)
# n = int(input())

# n%4==0
# print(bool(n))

# n = int(input())
# print(bool(n>0))

# n = int(input())
# print(bool(n%2==0))

# n = int(input())
# print(bool(n%10==2))

# a, b = map(int, input().split())
# print(bool(a%7==0 and b%7==0))

# a, b, c = map(int, input().split())
# print(bool(a==b and b==c))

# a, b = input().split()
# print(bool(a=='awesome' or b=='awesome'))

# a, b, c = map(int,input().split())
# print(bool((a==b and b!=c) or (b==c and a!=c) or (a==c and a!=b)))

# a, b, c = map(int,input().split())
# print(bool(a==b or b==c or a==c))

# a = int(input())
# print(bool(a>=10 and a<=99))

# a, b, c = map(int,input().split())
# print(bool(a**2==b**2+c**2 or b**2==a**2+c**2 or c**2==a**2+b**2))
# """или"""
# a, b, c = map(int, input().split())
# a, b, c = a * a, b * b, c * c
# print(a == b + c or b == a + c or c == a + b)

# print(not False)    

# print(not True or False)

# print(not True or True)    

# print(not (True or False))    

# print(not True and not False)    

# print(not (True and True))

""" ОКРУГЛЕНИЕ ВНИЗ ВВЕРХ ДО ПОЛНОГО, ОТСЕЧЕНИЕ ДРОБНОЙ ЧАСТИ"""
# N = (int(input()) / 10)
# from math import ceil
# print(ceil(N))

# N = (int(input()) / 4)
# from math import ceil
# print(ceil(N))

# import math
# print(math.ceil(int(input())/2) + math.ceil(int(input())/2) + math.ceil(int(input())/2))
# """или"""
# import math
# a=math.ceil(int(input())/2)
# b=math.ceil(int(input())/2)
# c=math.ceil(int(input())/2)
# print(a+b+c)

#(длинна*высоту +ширину*высоту)* на 2 и / 16
# L, W, H = map(int, input().split())
# import math
# print(math.ceil(int(L * H + W * H) * 2 / 16))

#print(-150%3)

# r = a = b = 'Я стану крутым программистом!' 
# print(r)
# print(a)
# print(b)
"""или"""
# a = 'Я стану крутым программистом!'
# print(a,a,a, sep = '\n')
"""или"""
# n='Я стану крутым программистом!'
# print((n+'\n')*3)
# a = b = input() 
# print(a,b,a,b, sep = ' ')
"""или"""
# print((input()+' ') * 4)
# print(len(input()))

# a, b, c = input(),input(),input()
# s1 = ord(a)
# s2 = ord(b)
# s3 = ord(c)
# print('Simvol code' a, 'is', s1, end=".\n" 'Simvol code' b, 'is', s2, end=".\n" 'Simvol code' c, 'is', s3, end=".")

# a,b,c = input().split()
# print('Simvol code', a, 'is', ord(a), end=".\n")
# print('Simvol code', b, 'is', ord(b), end=".\n")
# print('Simvol code', c, 'is', ord(c), end=".\n")

# s = input()
# s = s[len(s)-4]+s[len(s)-3]+s[len(s)-2]+s[len(s)-1]
# print(s)
'''или'''
# print(input()[-4:])
# print(input()[-1:-4])

'''Программа получает на вход одно слово. Ваша задача перенести последнюю букву в начало, 
тем самым сдвинуть все остальные буквы вправо на один разряд. 
В качестве ответа нужно вывести полученное слово'''
# a = input()
# b = a[0:-1]
# c = a[-1]
# print(c + b)

# print(input().upper())
# print(input().lower())

# s = input()
# word = input()
# print(s.upper() == word.upper())
'''или'''
#print(input().lower() == input().lower())

'''На вход подается строка. Ваша задача отформатировать строку так, чтобы первые 3 и последние 3 
символа были заглавными, а оставшиеся строчные.

Примечание:
Количество букв может быть различным, но гарантируется что их количество не меньше 6
'''
# s = input()
# s1 = s[0:3].upper()
# s2 = s[-3:].upper()
# s3 = s[3:-3].lower()
# print(s1+s3+s2)

# print((x:=input())[:3].upper() + x[3:-3].lower() + x[-3::].upper())

'''
На вход программе поступает строка, состоящая как из заглавных так из строчных букв.
Ваша задача преобразовать строку так, чтобы первая буква у каждого слова стала маленькой, 
а остальные буквы превратились в заглавные. Символы пунктуации и цифры не нужно преобразовывать.

В качестве ответа нужно вывести полученную строку
'''
# s = input().title()
# print(s.swapcase())
'''или'''
# print(input().title().swapcase())

'''
Петя записался в кружок по программированию. На первом занятии Пете задали написать простую программу. 
Программа должна делать следующее: в заданной строке, которая состоит из прописных и строчных латинских букв, она:
-удаляет все гласные буквы,
-перед каждой согласной буквой ставит символ ".",
-все прописные согласные буквы заменяет на строчные.
Гласными буквами считаются буквы A, O, Y, E, U, I, а согласными — все остальные. 
На вход программе подается ровно одна строка, она должна вернуть результат в виде одной строки, 
получившейся после обработки.
'''
# s = input().lower()
# s1 = s.replace('a','')
# s2 = s1.replace('o','')
# s3 = s2.replace('y','')
# s4 = s3.replace('e','')
# s5 = s4.replace('u','')
# s6 = s5.replace('i','')
# s6 = s6.replace('','.')
# s6 = s6[0:-1]
# print(s6)
'''или'''
# print(input().lower().replace('a','').replace('o','').replace('y','').replace('e','').replace('u','').replace('i','').replace('','.')[:-1])

'''
Напишите программу, которая проверяет начинается ли введенная фраза строкой mam вне 
зависимости от регистра букв

В качестве ответа необходимо вывести True, если введенная строка начинается с mam, 
во всех остальных случаях нужно вывести False
'''
# print(input().lower().endswith('mam',0,3))

"""или"""
# s = input()
# s = s.lower()
# s = s.endswith('mam',0,3)
# print()

'''Программа получает на вход две строки, назовем их s и postfix. Напишите программу, 
которая проверяет заканчивается ли введенная фраза s строкой postfix 

Входные данные
В отдельных строках вводятся два значения: сперва строка s, затем строка postfix

Выходные данные
Нужно вывести True, если введенная строка s заканчивается строкой postfix , 
во всех остальных случаях нужно вывести False. Регистр букв нужно учитывать
'''
# s  = input()
# postfix = input()
# print(s.endswith(postfix))
'''или'''
#print(input().endswith(input()))

'''
Напишите программу, которая проверяет, чтобы введенная фраза s одновременно начиналась 
со строки prefix и заканчивалась строкой postfix 

Входные данные
В отдельных строках вводится три значения: сперва строка s, затем строка prefix и потом postfix

Выходные данные
Нужно вывести True, если введенная строка s одновременно начинается со строки prefix и 
заканчивается строкой postfix . Во всех остальных случаях нужно вывести False. Регистр букв нужно учитывать
'''

# s = input()
# prefix = input()
# postfix = input()
# print(s.startswith(prefix) and s.endswith(postfix))

'''
На вход программе поступает строка, состоящая из произвольного количества символов. 
Ваша задача дополнить введенную строку до 15 символов в том случае, когда ей не хватает длины. 
Дополнять ее нужно символом -, ставя его в конец строки. В качестве ответа нужно вывести преобразованную строку

Если поступала на вход строка, у которой уже имелось как минимум 15 символов, то преобразований 
выполнять никаких не нужно. Выведите строку в том виде, в котором она вводилась
'''
# print(input().ljust(15, '-'))

'''
Ваша задача закодировать три поступающих оттенка в RGB код

Входные данные
Программе поступают последовательно три числа: значения оттенка красного, потом зеленого и затем синего цветов. 
Данные числа варьируются от 0 до 255 включительно

Выходные данные
Ваша задача закодировать оттенки цветов согласно RGB модели.

Не забывайте, что на каждый цвет всегда должно отводиться два разряда. Символы букв в шестнадцатеричной системе 
необходимо записывать в верхнем регистре.

Примечание: для перевода в 16-ую систему вы можете воспользоваться функцией hex, она возвращает строку перевода
в 16ую систему, впереди которой находятся два служебных знака 0x
'''

# a = int(input())
# b = int(input())
# c = int(input())
# a = hex(a)[2:].zfill(2).upper()
# b = hex(b)[2:].zfill(2).upper()
# c = hex(c)[2:].zfill(2).upper()
# print('#'+a+b+c)

# print(" /\_/\ \n >^,^<\n  / \ \n (|_|)_/") 
# print(r'''  /~~~\
#  //^ ^\\
# (/(_*_)\)
# _/''*''\_
# (/_)^(_\)''')

# print("Что Вы сказали? {0}? Какое интересное слово".format(input()))

# x = int(input())
# a = x - 1
# b = x + 1
# print("""Для числа {0} предыдущим будет число {1}.\nДля числа {0} следующим будет число {2}.""".format(x,a,b))

# x = int(input())
# a = x - 1
# b = x + 1
# print('''Для числа {0} предыдущим будет число {1}.'''.format(x,a,b))
# print('''Для числа {0} следующим будет число {2}.'''.format(x,a,b))


# f - строки
# print(f"""Дорогой {input()} {input()}, баланс вашего лицевого счета составляет {input()} руб.""")

"""
На вход программе поступает строка - имя пользователя. 
Вам необходимо при помощи f-строки вывести сообщение:

"Мое имя <name>!"
"""
#print(f"""Мое имя {input()}!""")

"""
Теперь ваша программа спрашивает у пользователя не только имя, но и его возраст. 
После этого программа должна вывести сообщение:

"Hello <name>. You are <age> years old."

Обратите внимание, что буквы в имени все должны быть заглавные. И не забывайте пользоваться f-строкой
"""

#print(f"""Hello {input().upper()}. You are {input()} years old.""")

"""
Напишите программу, которая запрашивает имя пользователя и его год рождения. 
Программа должна вывести на экран сообщение "<Имя пользователя>, вам исполнится 77 лет в <год>"
"""
# n = str(input())
# x = int(input())
# def f(x): 
#     return x+77
# print(f"""{n}, вам исполнится 77 лет в {f(x)}""")

"""
Напишите программу для перевода натурального значения секунд в значение минут определенного формата.
"""

# times = int(input())
# m = times // 60
# s = times % 60
# print(f"""{times} сек - это {m} мин. {s} сек.""")

"""
Вам поступает на вход два натуральных числа - ширина экрана и его высота в пикселях. 
В результате на экране разрешение экрана и общее количество пикселей в определенном формате. 
Все знаки препинания, пробелы, регистр букв важны. Также обратите внимание, 
что в этом месте «1920 x 1080» стоит английская буква «x»
"""
# a, b = map(int, input().split())
# print(f"""Разрешение экрана: {a} x {b}.
# Общее количество пикселей = {a * b}""")

"""
Давайте при помощи F-строк выведем информацию о трех видах деления, которые мы с вами изучили ранее: 
обычное деление, целочисленное и деление по остатку. 

Входные данные
На вход программе поступают два целых числа, при этом гарантируется, что второе число не равно 0.

Выходные данные 
Необходимо вывести результат трех видов деления первого числа на второе в определенном формате (см. примеры ниже)
"""
# a = int(input())
# b = int(input())
# print(f"""{a} / {b} = {a / b}\n{a} // {b} = {a // b}\n{a} % {b} = {a % b}""")

"""
Нашей программе поступает на вход x, y, z - три целых числа, обозначающие координаты вектора А. Затем необходимо найти координаты вектора B, путем увеличения на 5 каждой из координаты вектора А.

Оба вектора необходимо распечатать в определенном формате
"""

# a = int(input())
# b = int(input())
# c = int(input())
# print(f'Vector A({a}, {b}, {c})\nVector B({a+5}, {b+5}, {c+5})')

"""
Программа запрашивает у пользователя курс доллара - вещественное число,  и также количество долларов(целое число), 
которое пользователь хочет приобрести. В итоге программа должна вывести следующее сообщение:

Current dollar rate is <курс доллара>. You want to buy <количество долларов> dollars
You must pay <стоимость>
"""
# price = float(input())
# i = int(input())
# print(f'Current dollar rate is {price}. You want to buy {i} dollars\nYou must pay {price*i}')

"""На вход вашей программе поступают координаты точки x и y - два целых числа, 
каждое вводится на отдельной строчке. 

Ваша задача обязательно сохранить поступающие на вход значения в переменные x и y соответственно, 
и затем вывести строку вида Точка(x = {значение}, y = {значение})"""

# x = int(input())
# y = int(input())
# print(f'Точка(x = {x}, y = {y})')

"""
Но при купле/продаже обычно оставляют только два знака после запятой. В этом и будет заключаться, 
ваша задача - принять вещественное число, и вывести его в формате двух знаков после запятой
"""
# x = float(input())
# print(f'{x:.2f}')

"""
Вводится целое число, необходимо вывести его на экран, отведя как минимум 10 разрядов под отображение числа. 
Если в числе не хватает разрядов, необходимо выводить незначащие нули
"""

# x = int(input())
# print(f'{x:010d}')




# def f(x)
#     return x +
# print(f'Серый  лох, ловит блох, клопов размножает, хуйней страдает\nсо всей любовь Graf')

"""Напишите функцию, которая будет принимать список чисел и возвращать два числа, 
абсолютная разность которых минимальна. 
Пару чисел нужно вернуть в виде списка, отсортированного по возрастанию.

Если в списке есть несколько пар чисел с одинаковой абсолютной разностью, выберите ту пару,
которая в сумме даст наименьшее число.

В списке не будет дублирующихся значений.
"""

# text = input("Введите текст: ")
# l1 = input("Введите первую букву: ")
# l2 = input("Введите вторую букву: ")
# def est(text, l1, l2):
#     for i in range(len(text)):
#         if text[i] == l1:
#             if i + 1 < len(text) and text[i + 1] != l2:
#                 return False
#     return True
# result = est(text, l1, l2)
# print(result)

"""
Вводится целое число, необходимо выполнить выравнивание его по центру, отведя 15 символов под отображение числа. 
Символом заполнителем должен являться знак дефиса -Вводится целое число, необходимо выполнить выравнивание 
его по центру, отведя 15 символов под отображение числа. 
Символом заполнителем должен являться знак дефиса -
"""

# i = int(input())
# print(f'{i:-^15}')

# initial_buckwheat = 100
# buckwheat_per_month = 4


# my_list = [1] * 77
# print(my_list)

# my_list = [-214, 181, -139, 448, -664, -66, 213, 832, 717, -462, -924, -706, -85, -244, -222, -340, -482, -518, -781, 759, -593, 905, -354, -377, -141, -742, 383, -381, 109, -639, -480, -810, -686, 892, -612, 696, 993, 791, 631, -493, -218, -829, -275, 619, -628, -241, -565, -835, -69, 747, 711, -252, -811, -407, -153, 904, 933, -254, 307, -493, -419, -109, -543, 155, -127, 613, -452, -459, 856, 562, 333, -66, -77, -598, -779, -278, 867, 321, -20, -415, -357, 735, -906, -14, -370, 453, -630, -736, -830, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# print ((f"""{min(my_list)} {max(my_list)}"""))

"""
Программа получает на вход список из целых чисел. Ваша задача вывести True в случае, если в данном списке встречается значение 777. В противном случае вывести False

Примечание:

Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной my_list вам необходимо написать строчку

my_list = list(map(int, input().split()))
"""
# a = map(int,input().split())
# print(True if 777 in a else False)
'''
или
'''
# print(777 in map(int,input().split()))

"""Программа получает на вход список из целых чисел. Ваша задача найти среднее арифметическое 
введенного списка чисел
Примечание:
Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной list_numbers 
вам необходимо написать строчку
list_numbers = list(map(int, input().split()))
"""

# a = list(map(int,input().split()))
# print(sum(a)/len(a))

"""
Программа получает на вход список целых чисел и ваша задача вывести второй элемент этого списка.
Гарантируется, что список будет состоять не менее чем из трех элементов
Примечание:
Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку

a = list(map(int, input().split()))
"""
# a = list(map(int, input().split()))
# print(a[2])

"""
Программа получает на вход список целых чисел и ваша задача вывести срез списка с третьего элемента по 
пятый включительно.
Гарантируется, что список будет состоять не менее чем из пяти элементов.
Примечание:
Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
a = list(map(int, input().split()))
"""
# a = list(map(int, input().split()))
# print(a[2:5])

"""
Программа получает на вход список целых чисел и ваша задача вывести последние три элемента этого списка через срез
Гарантируется, что список будет состоять не менее чем из пяти элементов.
Примечание:
Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
a = list(map(int, input().split()))
"""
# a = list(map(int, input().split()))
# print(a[-3:])

"""
Программа получает на вход список целых чисел и ваша задача вывести каждый третий элемент этого списка, 
начиная со второго по счету значения.
Гарантируется, что список будет состоять не менее чем из семи элементов.
Примечание:
Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
a = list(map(int, input().split()))
"""
# a = list(map(int, input().split()))
# print(a[1::3])

"""
Программа получает на вход список целых чисел и ваша задача вывести этот список  в обратном порядке при помощи срезов
Гарантируется, что список будет состоять не менее чем из  трех элементов.
Примечание:
Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
a = list(map(int, input().split()))
"""

# a = list(map(int, input().split()))
# print(a[-1::-1])

"""
Перед вами список топовых сериалов по версии кинопоиска. Ваша задача заменить в нем сериал "Бригада" 
на "Сверхъестественное" и "Друзья" на "Настоящий детектив"
В качестве ответа распечатайте на экран обновленный список.
"""

# top = ['Игра престолов', 'Шерлок', 'Друзья', 'Во все тяжкие', 'Доктор Хаус', 'Теория большого взрыва', 'Бригада']
# top[6] = 'Сверхъестественное'
# top[2] = 'Настоящий детектив'
# print(top)

"""
Перед вами находится список months, хранящий сокращенное название месяцев в году
Ваша программа получает на вход порядковый номер месяца в году - целое число от 1 до 12.
Ваша задача распечатать краткое название месяца, которое соответствует порядковому номеру месяца
"""
# months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
# n = int(input())
# print(months[n-1])

# print(f'\nСПОР С ХИТРЫМ ЛИСОМ')
# print('<'+'-'*25+'>первый способ')
# a = [34, 23, 12, 28, 9, 15]
# b = a #первым способом приравняли между собой  
# print(f'{a}\n{b}')
# a.extend(['hello fox']) #вносим изменения в конец списка 'a'
# print(f'{a}\n{b}\n''<'+'-'*25+'>был первый способ') #смортим что выведет терминал
# print('|'*27)
# print('<'+'-'*25+'>ВТОРОЙ ПРОГОН ВТОРОГО СПОСОБА')
# c = a[:] #вторым способом скопировали содерживое ссылки 'a' в переменную 'с'
# print(f'{a}\n{c}')
# c[2] = [1,0,0,0] #меняем вложение 'a'
# print(f'{a}\n{c}\n''<'+'-'*25+'>был второй способ') #смотрим что именно поменял
# print('|'*27)
# print('<'+'-'*25+'>третий способ')
# d = a.copy() #копируем с помощью метода .copy данные под 'a' в переменную 'd'
# print(f'{a}\n{d}') 
# print('|'*46)
# a.pop()# меняем 'a'
# print(f'{a}\n{d}\n''<'+'-'*25+'>был третий способ')#смотрим что именно поменял

"""
В вашем распоряжении список numbers. Ваша задача добавить по порядку четыре следующих элемента в конец списка: 
111, 222, 789 и 201

 В качестве ответа необходимо вывести измененный список numbers
"""
# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# numbers.extend([111, 222, 789, 201])
# print(numbers)

"""
В вашем распоряжении список numbers. Ваша задача выполнить четыре следующих действия в том же порядке, 
как они указаны в списке:

добавить значение 111  на 5-й индекс;
добавить значение 222  на 8-й индекс;
добавить значение 789  на 0-й индекс;
добавить значение 201  на 11-й индекс;
 В качестве ответа необходимо вывести измененный список numbers
"""
# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# numbers.insert(5, 111)
# numbers.insert(8, 222)
# numbers.insert(0, 789)
# numbers.insert(11, 201)
# print(numbers)

"""
В вашем распоряжении два списка numbers  и extra. Ваша задача расширить numbers список за счет списка extra
Все элементы списка extra должны добавиться по порядку в конец списка numbers
В качестве ответа необходимо вывести измененный список numbers
"""
# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# extra = [43, 54, 23, 87, -4, -832, 90, 32, 543, 432, 4, 76, 8, 0, 21, 90, 32]
# numbers.extend(extra)
# print(numbers)

"""
В вашем распоряжении список numbers. Ваша задача выполнить действия из списка строго в том же порядке, а именно:

удалить элемент, стоящий на последней позиции;
удалить элемент, стоящий на 0-й позиции;
удалить элемент, стоящий на 12-й позиции;
удалить элемент, стоящий на 7-й позиции;
 В качестве ответа необходимо вывести на первой строке измененный список numbers, а на второй - сумму значений 
 удаленных элементов
"""
# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# x1 = numbers.pop(-1)
# x2 = numbers.pop(0)
# x3 = numbers.pop(12)
# x4 = numbers.pop(7)
# print(numbers)
# print(x1 + x2 + x3 + x4)

"""
В вашем распоряжении список numbers. ​Ваша задача удалить из этого списка числа 3, 5, 7 и 9. 
В качестве ответа необходимо вывести измененный список numbers
"""
# numbers = [-214, 777, 181, 9, 32, -139, 43, 89, 77, 448, -20, -917, 54, 5, 432, 43, 32, 422, -895, 7, 198, 284, 472, 3, -986, -964, -989, 29]
# numbers.remove(3)
# numbers.remove(5)
# numbers.remove(7)
# numbers.remove(9)
# print(numbers)

"""
В вашем распоряжении список numbers. Ваша задача отсортировать список numbers в порядке убывания  и 
вывести на экран результат.
"""
# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# numbers.sort(reverse=True)
# print(numbers)

"""
Программа получает на вход список из целых чисел. Ваша задача преобразовать его таким образом, 
чтобы элементы расположились в обратном порядке. 
Примечание:
Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
a = list(map(int, input().split()))
"""
# a = list(map(int, input().split()))
# a.reverse()
# print(a)

"""
Программа получает на вход список из целых чисел. Подсчитайте сколько раз в нем присутствует число 999
Примечание:
Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
a = list(map(int, input().split()))
"""
# a = list(map(int, input().split()))
# print(f'{a.count(999)}')

"""
В вашем распоряжении список numbers. Ваша задача скопировать все содержимое списка numbers в новую переменную copy_numbers
В качестве ответа необходимо вывести список copy_numbers
"""
# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# copy_numbers = numbers.copy()
# print(copy_numbers)

"""
Вводится два слова через пробел. Ваша задача преобразовать данную фразу таким образом, 
чтобы все буквы стали заглавными и между буквами в каждом слове появились дефисы
"""
# s = input().upper()
# word1, word2 = s.split()
# list1 = list(word1)
# list2 = list(word2)
# print('-'.join(list1),'-'.join(list2))

"""
Ваша программа получает на вход строку, содержащую имя, отчество и фамилию человека

Вам необходимо вывести фамилию и инициалы, как в примерах ниже
"""
# a,b,c = list(input().split())
# print(f'{c} {a[0]}.{b[0]}.')

"""или"""
# n, f, s = input().split()
# print(s + " " + n[0] + "." + f[0] + ".")

"""
Напишите программу, которая выводит слова введённой строки (части, разделённые символами пустого пространства) в столбик. 
Нужно обойтись только методами split и join у строк, в программе должен быть всего один вызов print.
"""
# words = input().split()
# print('\n'.join(words))

# a = list(input().split())
# print('\n'.join(a))

"""
На вход программе поступает одно слово.

Если это строка «Python», программа выводит ДА, в противном случае программа выводит НЕТ
"""
# a = str(input())
# if a == 'Python':
#     print("ДА")
# else:
#     print("НЕТ")

"""
Во всех странах присутствует подоходный налог. В каких-то странах он больше, в каких-то меньше. 
В РФ граждане платят подоходный налог в размере 13%.

Представьте теперь, что люди с доходом меньше 20000 рублей освобождены от уплаты налога. 
Напишите программу, которая получает на вход значение дохода в виде целого числа и выводит на экран сумму, 
оставшуюся после уплаты налога в 13%. Если у человека зарплата меньше 20000р налог не удерживается.
"""
# a = int(input())
# if a > 20000:
#     a = a - ((a / 100) * 13)
#     print(a)
# else:
#     print(a)
"""
Вводятся два целых числа, каждое в отдельной строке.
Ваша задача вывести наибольшее из данных чисел.
Примечание: используйте только условный оператор, функцией max пользоваться нельзя
"""

# a = int(input())
# b = int(input())
# if a > b:
#     print(a)
# else:
#     print(b)

"""
Программа получает на вход три натуральных числа A, B и C через пробел. 
Вам необходимо вывести YES в том случае, если A + B = C и вывести NO в противном случае.
"""

# a,b,c = map(int,input().split())
# if c == a + b:
#     print('YES')
# else:
#     print('NO')

"""
Программа получает на вход список из целых чисел, при этом гарантируется, что числа в списке повторяться не будут.
​​Ваша задача удалить из этого списка числа 3, 5, 7 и 9. 

Обратите внимание, что каждое из чисел 3, 5, 7 и 9. необязательно должно присутствовать в введенном списке.

В качестве ответа необходимо распечатать измененный список

Примечание:

Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку

a = list(map(int, input().split()))
"""
# a = list(map(int, input().split()))
# if 3 in a:
#     a.remove(3)
# if 5 in a:
#     a.remove(5)
# if 7 in a:
#     a.remove(7)
# if 9 in a:
#     a.remove(9)
# print(a)

"""
На момент написания текста из РФ можно было вывозить не более 10000$ или эквивалент в другой валюте. 
При превышении этой суммы необходимо составлять декларацию.

Давайте представим, что сумму выше 10000 долларов таможня забирает себе и вам останется только 10000$.

Давайте напишем такую программу, которая будет принимать целое положительное число - сумма в долларах. 
Если она не превышает 10000$, то выводим текст Сумма <значение> не превышает лимит, проходите

Если сумма превышает 10000$ выводим текст Ого! <значение>! Куда вам столько? Мы заберем <разница>

И конечно же нужно использовать сами знаете кого, иначе ваше решение не пройдет
"""

# if (x := int(input())) <= 10000:
#     print(f'Сумма {x} не превышает лимит, проходите')
# else:
#     print(f'Ого! {x}! Куда вам столько? Мы заберем {x - 10000}')

"""
На вход вашей программе поступает фраза, если в ней присутствует слово walrus выводим текст Нашли моржа, 
иначе выводим Никаких моржей тут нет.

И конечно же нужно использовать сами знаете кого, иначе ваше решение не пройдет
"""
# if (n := 'walrus') in (a := input()):
#     print('Нашли моржа')
# else:
#     print('Никаких моржей тут нет')

"""
Программа принимает на вход два слова s и t. 

Если слово t является словом s, записанным наоборот, выведите YES, иначе выведите NO.

Слова состоят из маленьких латинских букв. Входные данные не содержат лишних пробелов. 
Слова непустые, и их длины не превосходят 100 символов.
"""
# s = input()
# t = input()
# if s == t[::-1]:
#     print("YES")
# else:
#     print("NO")

"""
Требуется написать программу, определяющую, является ли четырехзначное натуральное число N палиндромом, т.е. числом, 
которое одинаково читается слева направо и справа налево.

Программа получает на вход целое положительное четырехзначное число N  и должна вывести YES,  
если число N является палиндромом, и NO - если не палиндром.
"""
# if (t := str(input())) == t[::-1]:
#     print('YES')
# else:
#     print('NO')

"""
Даны три натуральных числа a, b, c записанные в отдельных строках. 
Ваша задача определить, существует ли треугольник с такими сторонами. 

Для этого вспоминаем теорему о существовании треугольника. Она утверждает, что треугольник существует, 
если сумма любых двух сторон больше оставшейся третьей.

Выведите строку YES, если условие теоремы выполняется, иначе выведите строку NO.
"""

# a = int(input())
# b = int(input())
# c = int(input())
# if (a + b > c) and (b + c > a) and (a + c > b):
#     print('YES')
# else:
#     print('NO')

"""
Вы пользуетесь общественным транспортом? Вероятно, вы расплачивались за проезд и получали билет с номером. 
Счастливым билетом называют такой билет с шестизначным номером (иногда и с незначащими нулями), где сумма первых трех 
цифр равна сумме последних трех. Т.е. билеты с номерами 385916 и 2011 – счастливые, т.к. 3+8+5=9+1+6 и 0+0+2=0+1+1. 
Вам требуется написать программу, которая проверяет «счастливость» билета.

Программа получает на вход одно целое число N (0 ≤ N < 106) и должна вывести «YES», если билет с номером N счастливый и «NO» 
в противном случае.
"""
# a = list(map(int, input()))
# if sum(a[-3:]) == sum(a[:-3]):
#     print('YES')
# else:
#     print('NO')

'''или'''
# if 0 <= len(a := [int(i) for i in input()]) < 7 and len(a) % 2 == 0:
#     if sum(a[-(len(a))//2:]) == sum(a[:-(len(a))//2]):
#         print('yes')
#     else:
#         print('no')
# else:
#     print('no')

# def is_lucky_ticket(number):
#     # Разбиваем номер билета на две половины
#     first_half = number // 1000
#     second_half = number % 1000
    
#     # Вычисляем сумму цифр в первой и второй половинах
#     sum_first_half = sum(int(digit) for digit in str(first_half))
#     sum_second_half = sum(int(digit) for digit in str(second_half))
    
#     # Проверяем, равны ли суммы
#     if sum_first_half == sum_second_half:
#         return "YES"
#     else:
#         return "NO"

# # Ввод числа
# N = int(input())

# # Вывод результата
# print(is_lucky_ticket(N))


# def is_lucky_ticket(number):
#     # Дополняем число нулями слева до шестизначного
#     number_str = str(number).zfill(6)
    
#     # Вычисляем сумму первых трех цифр и последних трех цифр
#     sum_first_half = sum(int(digit) for digit in number_str[:3])
#     sum_second_half = sum(int(digit) for digit in number_str[3:])
    
#     # Проверяем, равны ли суммы
#     if sum_first_half == sum_second_half:
#         return "YES"
#     else:
#         return "NO"

# # Пример использования
# number = int(input())
# print(is_lucky_ticket(number))

"""
Напишите программу, которая на вход получает координаты двух клеток шахматной доски и выводит сообщение о том, 
являются ли эти клетки одного цвета. Столбцы на шахматной доске обозначаются английскими строчными буквами.

Программа должна выводить YES, когда клетки одного цвета, NO - разного.
 Гарантируется, что значение колонок это латинские буквы abcdefgh, а строки это символы цифр от 1-8
"""
# a, b = [input() for i in range(2)]
# black = ['a1', 'a3', 'a5', 'a7', 'b2', 'b4', 'b6', 'b8', 'c1', 'c3', 'c5', 'c7', 'd2', 'd4', 'd6', 'd8', 'e1', 'e3', 'e5', 'e7', 'f2', 'f4', 'f6', 'f8', 'g1', 'g3', 'g5', 'g7', 'h2', 'h4', 'h6', 'h8']
# white = ['a2', 'a4', 'a6', 'a8', 'b1', 'b3', 'b5', 'b7', 'c2', 'c4', 'c6', 'c8', 'd1', 'd3', 'd5', 'd7', 'e2', 'e4', 'e6', 'e8', 'f1', 'f3', 'f5', 'f7', 'g2', 'g5', 'g6', 'g8', 'h1', 'h3', 'h5', 'h7']
# if a in black and b in black or a in white and b in white:
#     print("YES")
# else:
#     print("NO")

'''или'''

# s = '_abcdefgh'
# coord_1 = input()
# coord_2 = input()
# letter = coord_1[0]
# letter_2 = coord_2[0]
# column1 = s.find(letter)
# column2 = s.find(letter_2)
# row1 = int(coord_1(1))
# row2 = int(coord_2(1))
# if (row1 + column1) % 2 == (row2 + column2) % 2:
#     print('YES')
# else:
#     print('NO')

"""
На вход вашей программе поступает два неравных друг другу целых числа в отдельных строках
Ваша задача сохранить наименьшее из этих чисел в переменную  minimum, а наибольшее - в maximum
Использовать нужно, конечно же, тернарный оператор
В качестве ответа выведите через пробел сперва minimum , а потом maximum

"""
# max = int(input())
# min = int(input())
# if max > min: 
#     print(f'{min} {max}')
# else:
#     print(f'{max} {min}')

'''или'''
# a,b = int(input()),int(input())
# (minimum, maximum) = (b,a) if b<a else (a,b)
# print (minimum, maximum)

"""
Ваша программа принимает на вход предложение и ваша задача определить является ли оно вопросом?
Если последний символ предложения это знак ?, то в переменную sentence сохраните строку Вопросительное, 
иначе запишите строку Обычное
В качестве ответа необходимо вывести переменную sentence
"""
# text = str(input())
# sentence = 'Вопросительное' if '?' in text[-1] else 'Обычное'
# print(sentence)

"""
Если расположить рядом два магнита, они начинают взаимодействовать друг с другом. 
При этом одинаковые магнитные полюса (север/север или юг/юг) отталкиваются друг от друга, 
в то время как разные магнитные полюса (север/юг) притягиваются друг к другу.

Ваша программа получает два значения в разных строках - полярности магнитов, 
которые могут иметь значения либо N ( север) либо S (юг)

Ваша задача сохранить в переменную experiment строку Притягиваются, если магниты имеют разную полярность, 
в противном случае сохраните строку Отталкиваются

В качестве ответа необходимо вывести переменную experiment
"""

# a,b = str(input()),str(input())
# experiment = 'Отталкиваются' if a==b else 'Притягиваются'
# print(experiment)

"""
В данной задаче необходимо сравнить два целых числа A и B. Они поступают на вход программе отдельно в каждой строке.

Ваша задача вывести символ <, если A меньше B, >, если A больше B и =, если A=B.
"""
# a = int(input())
# b = int(input())
# if a < b:
#     print('<')
# else:
#     if a > b:
#         print('>')
#     else:
#         print('=')

"""
Даны три целых числа, каждое записано в отдельной строке.
Нужно вывести значение наибольшего из данных чисел
Примечание: используйте только условный оператор, функцией max пользоваться нельзя
"""
# a = int(input())
# b = int(input())
# c = int(input())
# if a > b and a > c:
#     print(a)
# else:
#     if b > c:
#         print(b)
#     else:
#         print(c)

"""
На свой день рождения Петя купил красивый и вкусный торт, который имел идеально круглую форму. Петя не знал, 
сколько гостей придет на его день рождения, поэтому вынужден был разработать алгоритм, согласно которому он 
сможет быстро разрезать торт на N равных частей. Следует учесть, что разрезы торта можно производить как по радиусу, 
так и по диаметру.
Помогите Пете решить эту задачу, определив наименьшее число разрезов торта по заданному числу гостей.
Входные данные
Программа получает на вход натуральное число N – число гостей, включая самого виновника торжества
Выходные данные
Выведите минимально возможное число разрезов торта.
"""
# n = int(input())
# if n %  2 == 0:
#     print(n // 2)
# else:
#     if n==1:
#         print(0)
#     else:
#         print(n)

"""
В отделе работают 3 сотрудника, которые получают заработную плату в рублях. Требуется определить: 
на сколько зарплата самого высокооплачиваемого из них отличается от самого низкооплачиваемого.
Входные данные
Размеры зарплат всех сотрудников вводятся в одну строку через пробел. Каждая заработная плата – это натуральное число, 
не превышающее 105. И гарантируется ,что все зарплаты различны
Выходные данные
Необходимо вывести одно целое число — разницу между максимальной и минимальной зарплатой.
Примечание: функциями min и max, а также сортировками пользоваться нельзя, мы же условный оператор изучаем)
"""

# a, b, c, = map(int, input().split())
# if a > b and b > c:
#     print(a - c)
# else:
#     if a > c and c > b:
#         print(a - b)
#     else:
#         if b > a and a > c:
#             print(b - c)
#         else:
#             if b > c and c > a:
#                 print(b - a)
#             else:
#                 if c > a and a > b:
#                     print(c - b)
#                 else:
#                     if c > b and b > a:
#                         print(c - a)

"""
Маленький Петя очень любит подарки. Его мама подарила ему на день рождения две строки равной длины, 
состоящие из больших и маленьких букв латинского алфавита. Теперь Петя хочет сравнить эти строки лексикографически. 
При этом регистр букв значения не имеет, то есть большая буква считается эквивалентной соответствующей маленькой букве. 
Помогите Пете выполнить сравнение.

Входные данные
В каждой из первых двух строк записано по одной подаренной строке. Длина строк находится в пределах от 1 до 100 включительно. 
Гарантируется, что строки имеют одинаковую длину, а также состоят из больших и маленьких букв латинского алфавита.

Выходные данные
Если первая строка меньше второй, выведите «-1». Если вторая строка меньше первой, выведите «1». 
Если строки равны, выведите «0». Учтите, что регистр букв не учитывается при сравнении.
"""

# a = str(input().lower())
# b = str(input().lower())
# if a == b:
#     print(0)
# else:
#     if a > b:
#         print(1)
#     else:
#         print(-1)

"""
Двое решили посоревноваться в набирании текстов на сайте «Кнопочные гонки». 
Во время соревнования необходимо ввести текст из s символов. Первый участник набирает один символ за v1 миллисекунд и 
имеет пинг t1 миллисекунд. Второй участник набирает один символ за v2 миллисекунд и имеет пинг t2 миллисекунд.

При соединении с пингом (задержкой) в t миллисекунд соревнование проходит для участника следующим образом:

Ровно через t миллисекунд после начала соревнования участник получает текст, который необходимо ввести.
Сразу после этого он начинает вводить этот текст.
Ровно через t миллисекунд после того, как он перепечатал весь текст, сайт получает информацию об этом.
Победителем в соревновании является тот участник, информация об успехе которого пришла раньше. Если информация пришла от обоих участников одновременно, считается, что произошла ничья.

По данной длине текста и информации об участниках, определите исход игры.

Входные данные

Первая строка содержит пять целых чисел s, v1, v2, t1, t2 (1 ≤ s, v1, v2, t1, t2 ≤ 1000) — 
количество символов в тексте, скорость набора текста первым участником, скорость набора текста вторым участником, 
пинг первого участника и пинг второго участника.

Выходные данные

Если выиграет первый участник, выведите «First». Если выиграет второй участник, выведите «Second». 
В случае ничьей выведите «Friendship».
"""
# s, v1, v2, t1, t2 = map(int, input(). split())
# if (s*v1+t1+t1)<(s*v2+t2+t2):
#     print('First')
# if (s*v1+t1+t1)>(s*v2+t2+t2):
#     print('Second')
# if (s*v1+t1+t1)==(s*v2+t2+t2):
#     print('Friendship')

"""
При игре в «Города» игроки по очереди называют названия городов так, чтобы первая буква каждого нового слова совпадала 
с последней буквой предыдущего. При этом считают, что если последняя буква предыдущего слова — мягкий знак, то с первой 
буквой следующего слова надо сравнивать букву, предшествующую мягкому знаку.

Напишите программу, которая считывает подряд две строки, после чего выводит «Good», если последний символ первой строки 
совпадает с первым символом второй (с учётом правила про мягкий знак), и «Bad» в противном случае.
"""

# s1 = str(input().lower().rstrip('ь'))
# s2 = str(input().lower())
# if s1[-1]==s2[0]:
#     print('Good')
# else:
#     print('Bad')

"""
Классическая задача для начинающих. 

Ваша программа должна считать одно натуральное число, после чего вывести:

“Fizz”, если это число делится на 3;
“Buzz”, если это число делится на 5;
“FizzBuzz”, если выполнены оба предыдущих условия;
само это число в остальных случаях.
"""

# a = int(input())
# if a % 3 == 0 and a % 5 == 0:
#     print('FizzBuzz')
# elif a % 3 == 0: 
#     print('Fizz')
# elif a % 5 == 0:
#     print('Buzz')
# else:
#     print(a)

"""
Даны три целых числа, записанных в отдельных строках. Определите, сколько среди них совпадающих.

Программа должна вывести одно из чисел: 3 (если все совпадают), 2 (если два совпадают) или 0 (если все числа различны).
"""

# a = int(input())
# b = int(input())
# c = int(input())
# if a == b and b == c:
#     print(3)
# elif a == b or a == c or b == c:
#     print(2)
# else:
#     print(0) 

"""
Программа определяет наименование месяца по его номеру n. Название месяца пишется с заглавной буквы

Программа получает на вход номер месяца - натуральное число N (N<=12) и в зависимости от его значения вывод название месяца 
"""

# n = int(input())
# if n >= 13 or n <= 0:
#     print('Дурила')
# elif n == 1:
#     print('Январь')
# elif n == 2:
#     print('Февраль')
# elif n == 3:
#     print('Март')
# elif n == 4:
#     print('Апрель')
# elif n == 5:
#     print('Май')
# elif n == 6:
#     print('Июнь')
# elif n == 7:
#     print('Июль')
# elif n == 8:
#     print('Август')
# elif n == 9:
#     print('Сентябрь')
# elif n == 10:
#     print('Октяюрь')
# elif n == 11:
#     print('Ноябрь')
# elif n == 12:
#     print('Декабрь')
"""или"""

# mes = ("0", "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь")
# n = int(input())
# if n >= 13 or n <= 0:
#     print('Дурила')
# else:
#     print(mes[n])

"""или"""
# x = int(input())
# year = {1: "Январь", 2: "Февраль", 3: "Март", 4: "Апрель", 5: "Май", 6: "Июнь",
#         7: "Июль", 8: "Август", 9: "Сентябрь", 10: "Октябрь", 11: "Ноябрь", 12: "Декабрь"}
# print(year.get(x))

"""
Ваша программа получает на вход возраст человека. Вам необходимо вывести на экран сообщение:

"Младенец", если возраст меньше 2х лет;
"Малыш", если возраст от 2, но меньше 4;
"Ребенок", если возраст от 4 лет, но меньше 12;
"Подросток", когда возраст от 12 лет, но меньше 19;
"Взрослый человек", когда возраст от 19 лет, но меньше 65;
"Пожилой человек", если возраст 65 и более.
"""

# years = int(input())
# s = ("Младенец", "Малыш", "Ребенок", "Подросток", "Взрослый человек", "Пожилой человек")
# if years >= 65:
#     print(5)
# elif years < 2:
#     print(0)
# elif years == 2 or years < 4:
#     print(s[1])
# elif years == 4 or years < 12:
#     print(s[2])
# elif years == 12 or years < 19:
#     print(s[3])
# elif years == 19 or years < 65:
#     print(s[4])

"""или"""
# n = int(input())
# print('Младенец' if n < 2 
#       else 'Малыш' if n < 4 
#       else 'Ребенок' if n < 12 
#       else 'Подросток' if n < 19 
#       else 'Взрослый человек' if n < 65 
#       else 'Пожилой человек')

"""или"""

# dict1 = {
#     'Младенец':range(2),
#     'Малыш':range(2,4),
#     'Ребенок':range(4,12),
#     'Подросток':range(12,19),
#     'Взрослый человек':range(19,65),
#     'Пожилой человек':range(65,1000)
# }
# a = int(input())
# for i, j in dict1.items():
#     if a in j:
#         print(i)
#         break

"""
Калькулятор своими руками
Напишите программу, которая считывает с клавиатуры два вещественных числа, а затем строку. 
Если эта строка является обозначением одной из четырёх основных математических операций (+, -, * или /), 
то выведите результат применения этой операции к введенным ранее числам, в противном случае выведите «Неизвестно». 
Также «Неизвестно» следует вывести, если пользователь захочет поделить на ноль.

Входные данные
Два вещественных числа в каждой отдельной строчки. На третьей строке вводится символ операции

Выходные данные
Необходимо посчитать значение операции «+», «-», «*», «/». Если ввели символ, который не относится к данным операциям, 
необходимо вывести «Неизвестно». «Неизвестно» также выводится при попытке деления на ноль
"""


# a, b, c =float(input()), float(input()), input()
# if c == '/' and a == 0 or b == 0:
#     print('Неизвестно')
# elif c == '+' or c == '-' or c == '*' or c == '/':
#     print(res := eval(f'{a}{c}{b}')) 
# else:
#     print('Неизвестно')

# a, b, c = float(input()), float(input()), input()
# if c == '/' and a == 0 or b == 0:
#     print("Неизвестно")
# elif c == '+' or c == '-' or c == '*' or c == '/':
#     res = eval(f"{a}{c}{b}")
#     print(res)
# else:
#     print("Неизвестно")

# a, b, c = float(input()), float(input()), input()
# if a == 0 or b == 0:
#     print("Неизвестно")
# elif c == '+':
#     res = a + b
#     print(res)
# elif c == '-':
#     res = a - b
#     print(res)
# elif c == '*':
#     res = a * b
#     print(res)
# elif c == '/':
#     res = a / b
#     print(res)
# else:
#     print("Неизвестно")

# num1 = float(input())
# num2 = float(input())
# q = input()
# if q == "-":
#     print(num1 - num2)
# elif q == "+":
#     print(num1 + num2)
# elif q == "*":
#     print(num1 * num2) 
# elif q == "/" and num1 == 0:
#     print("Неизвестно")
# elif q == "/" and num2 == 0:
#     print("Неизвестно")
# elif q == "/":
#     print(num1 / num2)
# else:
#     print("Неизвестно")

"""
Напишите программу, которая имитирует проверку пароля, придуманного пользователем. 
Пользователь сперва вводит пароль, потом вводит подтверждение пароля. Вам нужно обработать следующие ситуации:

если пароль, который ввёл пользователь (в первый раз) короче 7 символов, программа выводит Short
если пароль достаточно длинный, но введённый во второй раз пароль не совпадает с первым, программа выводит Difference
если же и эта проверка пройдена успешно, программа выводит латинскими буквами OK
"""
# pas1 = input()
# pas2 = input()
# if len(pas1) > 7 and pas1 == pas2:
#     print('OK')
# elif len(pas1) < 7:
#     print('Short')
# elif pas1 > pas2 or pas1 < pas2:
#     print('Difference')

"""
Давайте попробуем потренироваться в операторе match-case

Чуть ранее студенты технических специальностей университета учились 5 лет (специалитет) и затем им вручался аттестат. 
Ваша программа программа будет получать на вход целое число - номер курса, и в зависимости от номера выводить следующий текст

если ввели 1, выведите сообщение Совсем еще зеленый студентик
если ввели 2, выведите сообщение Джун-студент
если ввели 3, выведите сообщение Мидл-студент
если ввели 4, выведите сообщение Сеньор-студент
если ввели 5, выведите сообщение Босс качалки
при вводе остальных значений, выведите текст Неизвестный курс
Используйте при решении оператор match-case
"""

# lang = input()

# match lang:
#     case '1':
#         print("Совсем еще зеленый студентик")
#     case '2':
#         print("Джун-студент")
#     case "3":
#         print("Мидл-студент")
#     case "4":
#         print("Сеньор-студент")
#     case "5":
#         print("Босс качалки")
#     case  _:
#         print("Неизвестный курс")


"""
Часто можно услышать такой вопрос. Давайте это запрограммируем.

Программа получает на вход номер месяца - натуральное число N (1 ≤ N ≤ 12) и в зависимости от его значения выводит 
количество дней в месяце. Будем считать, что год невисокосный. 
При решении конечно же используйте оператор match-case
"""

# mes = int(input())
# match mes:
#     case 1 | 3 | 5 | 7 | 8 | 10 | 12:
#         print('31')
#     case 2:
#         print('28')
#     case 4 | 6 | 9 | 11:
#         print('30')
#     case _:
#         print('13й месяц-Дурила, и у него один день 29е февраля. Больше месяцев нет')

"""
Программа ваша получает на вход строку - название знака зодиака и затем сообщает к какому типу относится введенный знак. 
Логика определения следующая:

если введут любое из значений Овен, Лев, Стрелец, то программа выводит текст Огненный
если введут любое из значений Телец, Дева, Козерог, то программа выводит текст Земной
если введут любое из значений Близнецы, Весы, Водолей, то программа выводит текст Воздушный
если введут любое из значений Рак, Скорпион, Рыбы, то программа выводит текст Водный
"""
# znak = str(input())
# match znak:
#     case 'Овен' | 'Лев' | 'Стрелец':
#         print('Огненный')
#     case 'Телец' | 'Дева' | 'Козерог':
#         print('Земной')
#     case 'Близнецы' | 'Весы' | 'Водолей':
#         print('Воздушный')
#     case 'Рак' | 'Скорпион' | 'Рыбы':
#         print('Водный')
#     case _:
#         print('!!!!!!!Ты дурак это зодиакальный гороскоп!!!!!!!')

"""или"""

# match zodiac := input():
#     case 'Овен' | 'Лев' | 'Стрелец' as n:
#         print('Огненный')
#     case 'Телец' | 'Дева' | 'Козерог' as n:
#         print('Земной')
#     case 'Близнецы' | 'Весы' | 'Водолей' as n:
#         print('Воздушный')
#     case 'Рак' | 'Скорпион' | 'Рыбы' as n:
#         print('Водный')

"""или"""
# """если введут любое из значений Овен, Лев, Стрелец, то программа выводит текст Огненный
# если введут любое из значений Телец, Дева, Козерог, то программа выводит текст Земной
# если введут любое из значений Близнецы, Весы, Водолей, то программа выводит текст Воздушный
# если введут любое из значений Рак, Скорпион, Рыбы, то программа выводит текст Водный"""

# import re
# zodiac_sighs = re.findall(r'\b([А-Я]\w+),[ ]*\b', __doc__)
# elements = re.findall(r'текст[ ]*([А-Я]\w+)\b', __doc__)
# print(elements[zodiac_sighs.index(input()) // 3])

"""
Напишите программу, которая распечатает все натуральные числа от 1000 до 2000 включительно.

Каждое число следует выводить на отдельной строчке как в примере ниже

1000
1001
1002
...
1998
1999
2000
"""
# i = 1000
# while i <= 2000:
#     print(i)
#     i += 1

"""
Напишите программу, которая распечатает все натуральные числа кратные 5 от 195 до 6785 включительно в порядке убывания.

Каждое число следует выводить на отдельной строчке как в примере ниже

6785
6780
6775
...
205
200
195
"""
# n = 6790
# while n%5==0 and 195<n<=6790:
#     n-=5
#     print(n)

"""
Мишка Лимак хочет стать самым большим медведем, ну, или хотя бы стать больше своего старшего 
брата Боба.

Сейчас вес Лимака равен a, а вес Боба равен b. Гарантируется, что вес Лимака 
меньше или равен весу Боба.

Лимак ест много, и его вес утраивается каждый год, а вес Боба удваивается 
каждый год.

Через сколько целых лет Лимак станет строго больше 
(т. е. будет весить строго больше) Боба?

Входные данные
В единственной строке находятся два целых числа a и b (1 ≤ a ≤ b ≤ 10) — 
веса Лимака и Боба соответственно.

Выходные данные
Выведите одно целое число — через сколько целых лет Лимак станет строго больше Боба.
"""
# a, b = map(int,input().split())
# count = 0
# while a <= b:
#     count += 1
#     a = a * 3
#     b = b * 2
# print(count)
"""
Японцы считают цифру «4» очень несчастливой, они даже исключают ее из нумерации этажей
Давайте и мы, от греха подальше, избавимся от этой цифры в списке numbers. Ваша задача удалить все 
упоминания цифры «4» в списке numbers и затем вывести список при помощи команды
"""
# numbers = [2, 3, 7, 9, 5, 0, 6, 3, 6, 0, 1, 7, 9, 4, 4, 4, 2, 2, 6, 9, 1, 7, 0, 3, 8, 1, 0, 3, 8, 0, 8, 4, 0, 2, 3, 6, 6, 1, 5, 8, 7, 2, 3, 8, 7, 7, 1, 2, 2, 8, 4, 3, 4, 8, 0, 7, 9, 8, 3, 7, 7, 7, 7, 5, 1, 7, 4, 5, 0, 8, 0, 9, 2, 4, 7, 6, 6, 5, 9, 7, 1, 7, 8, 8, 3, 4, 9, 7, 6, 4, 2, 0, 0, 0, 9, 4, 0, 9, 4, 4, 4, 5, 5, 4, 2, 5, 9, 4, 8, 1, 5, 7, 1, 0, 2, 6, 8, 7, 2, 7, 9, 3, 6, 4, 7, 5, 0, 7, 2, 0, 8, 2, 9, 8, 6, 4, 4, 7, 5, 5, 9, 4, 9, 5, 6, 9, 1, 1, 3, 1, 5, 2, 1, 7, 0, 0, 7, 8, 1, 3, 0, 0, 4, 4, 3, 3, 6, 7, 8, 6, 1, 2, 0, 2, 0, 9, 9, 0, 5, 2, 4, 1, 7, 4, 9, 9, 4, 9, 6, 9, 2, 7, 1, 2, 4, 5, 4, 0, 9, 0]
# # здесь должен быть ваш код
# numbers.remove(4)
# while 4 in numbers:
#     numbers.remove(4)
# # здесь должен быть ваш код
# print(*numbers)

"""
На вход программе поступает слово. Вам необходимо воспроизвести процесс, 
в котором каждый раз у этого слово будет пропадать первая и последняя буква. 
Этот процесс необходимо закончить, когда в слове останется только одна буква или слово 
станет пустой строкой. 
При этом результат каждого этапа нужно выводить
"""
# s = input().strip()
# print(s)
# while len(s) > 0:
#     s=s[1:-1]
#     print(s)

"""
Выведите все точные квадраты натуральных чисел, не превосходящие входного натурального числа N.
Входные данные
На вход поступает натуральное число N

Выходные данные
Необходимо вывести  все точные квадраты натуральных чисел, не превосходящие данного числа N.
"""
# n = int(input())
# a = 0
# while (a**2)<n:
#     a+=1
#     if a**2<=n:
#         print(a**2)

"""
В первый день спортсмен пробежал X километров. В каждый последующий день он увеличивал пробег на 15% от предыдущего дня. 
Вам необходимо определить номер дня, в который пробег спортсмена составил не менее Y километров. Само число Y 
будет поступать на вход программе.

Входные данные
Программа получает на вход два натуральных числа X и Y

Выходные данные
Выведите целое число – номер дня, в который спортсмен пробежал не менее Y километров.
"""
# x, y = map(int, input().split())
# d = 1
# while x <= y:
#     x = x * 1.15
#     d += 1
#     if x >= y:
#         print(d)

# x, y = map(int, input().split())
# i = 1
# while x <= y:
#     x*=1.15
#     i+=1
# print(i)

"""
У Васи есть n пар носков. Утром каждого дня, собираясь в школу, Вася должен надеть пару носков. Вечером, 
прийдя со школы, Вася снимает надетые носки и выбрасывает их. Каждый m-й день (в дни с номерами m, 2m, 3m, ...) 
мама покупает Васе одну пару носков. Она делает это поздно вечером, поэтому Вася может надеть новые носки не раньше
 следующего дня. На сколько подряд идущих дней Васе хватит носков?

Входные данные
В единственной строке записано два целых числа n и m (1 ≤ n ≤ 100; 2 ≤ m ≤ 100),
 разделенные пробелом.

Выходные данные
Выведите единственное целое число — ответ на задачу.

Примечание
В первом примере первые два дня Вася будет носить носки, которые у него были изначально, затем на третий день будет
 носить носки, которые были куплены во второй день.

Во втором примере первые девять дней он будет носить носки, которые у него были изначально, затем три дня будет носить
 носки, которые были куплены в третий, шестой и девятый дни. Затем еще день будет носить носки, которые были куплены в
  двенадцатый день.
"""
# socks, mama_day = map(int,input().split())
# day = 0
# while socks > 0:
#     socks -= 1
#     day += 1
#     if day % mama_day == 0:
#         socks += 1
# print(day)

"""
Программист Василий любит романтику — поэтому на этот Новый Год он решил освещать свою комнату свечами.

У Василия есть a свечей. Когда Василий зажигает новую свечу, сначала она горит ровно один час, а затем тухнет. 
Василий — сообразительный малый, поэтому из b потухших свечей он умеет получать одну новую свечу. 
В последствии эту новую свечу (так же как и другие новые свечи) можно зажечь.

Теперь Василию интересно, на сколько часов освещения хватит его свечек, если он будет действовать оптимальным образом. 
Помогите ему найти это число.

Входные данные

В единственной строке заданы два целых числа a и b (1 ≤ a ≤ 1000; 2 ≤ b ≤ 1000).

Выходные данные

Выведите единственное целое число — количество часов, которое Василий сможет освещать комнату.
"""
# a, b = map(int,input().split())
# time = 0
# while a > 0:
#     a -= 1
#     time += 1
#     if time % b == 0:
#         a += 1
# print(time)

"""
В архитектуре компьютера важную роль играют числа, являющиеся степенями двойки: 1, 2, 4, 8 и так далее.
 Напишите программу, которая проверяет, является ли введённое натуральное число степенью двойки. Если да, 
то выводится сама эта степень; если нет, выводится «НЕТ»
"""
# a = int(input())
# i = 0
# b = 2
# while b**i < a:
#     i += 1
# if b**i != a:
#     print('НЕТ')
# else:
#     print(i)

"""
Возьмём число. Умножим его на его же первую цифру. Результат умножим на первую цифру результата. 
И так далее. Например, начнём с 8:
8→8∗8=64
64→6∗64=384
384→3∗384=1152
1152→1∗1152=1152
Очевидно, когда первая цифра очередного числа в такой последовательности становится равной 1, 
числа перестают изменяться. Но это происходит не при всех начальных числах.

Напишем программу, которая будет хотя бы приблизительно определять судьбу введённого числа n.

Начиная с числа n, умножайте имеющееся число на его первую цифру, пока у получившегося числа первая цифра не станет 
равной 1, либо пока оно не превысит миллиарда. В качестве ответа выведите результат
"""
# n=int(input())
# while str(n)[0] != '1' and n <= 1000000000:
#     a= str(n)[0]
#     b=int(a)
#     n=n*b
# print(n)

"""
Пользователь вводит целые числа по одному в строке, последовательность оканчивается числом 0. Все,
 что вводится после 0 не относится к последовательности. 
Напишите программу, которая выводит сумму всех членов данной последовательности.
"""
# n = int(input())
# s = 0
# while n != 0:
#     print(n)
#     n = int(input())
#     s = n + s
# if n == 0:
#     print(0)

# s = 0
# n = int(input())
# while n != 0:
#         s = s + n
#         n = int(input())
# print(s)
"""
На каждой отдельной строчке пользователь вводит друг за другом пароли в виде строки символов. 
Валидными паролями будем считать строки, у которых длина варьируется от 5 до 9 символов включительно. 
Как только вы встретите первый невалидный пароль, ваша программа должна закончить считывать пароли и вывести
 последний введенный валидный пароль.
Гарантируется, что первый пароль всегда валидный
"""
# p = 0
# n = str(input())
# while len(p) >= 5 and len(p) <= 9:
#     p = n
# print(n)

# while True:
#     n=str(input())
#     if 5<=len(n)<=9:
#         b=n
#     else:
#         break
# print(b)

"""
У нас в наличии рюкзак, вместимость которого составляет n литров, и наша задача забить его до предела 
максимально возможно. Нам поступают вещи, объем которых измеряется также в литрах, и мы должны их 
складывать в наш рюкзак без возможности пропуска. Как только суммарный объем новой добавляемой вещи 
превысит вместимость рюкзака, ваша программа должна вывести слово "Довольно!" 
и затем на отдельных строчках суммарный объем вещей, которые мы смогли упаковать в рюкзак, 
и их количество

Входные данные
Число n – вместимость рюкзака. Далее идут произвольное количество строк – объем очередного предмета.

Выходные данные
Строка "Довольно!" и затем два числа – суммарный объем упакованных товаров и их количество. 
Каждое значение выводится в отдельной строке.
"""

# n=int(input()) 
# a=0  
# b=0 
# c=0 
# while a<=n:
#     b=int(input())
#     c+=1
#     a+=b
# print('Довольно!',a-b,c-1, sep='\n')
'''или'''
# R = []                # "РЮКЗАК"
# V = int(input())      # вводим объём рюкзака
# s = int(input())      # вводим объём первой вещи
# while V - s >= 0:     # кладём вещь в рюкзак, если помещается
#     V = V - s         # считаем оставшееся место
#     R.append(s)       # вещи в рюкзаке
#     s = int(input())  # берём следующую вещь
# print("Довольно!")    # последняя вещь не уместилась
# print(sum(R))         # выводим объём взятого барахла
# print(len(R))         # выводим количество взятых вещей
'''или'''
# n, r = int(input()), []
# while sum(r) <= n:
#     r.append(int(input()))
# print('Довольно!', sum(r[:-1]), len(r) - 1, sep='\n')

"""
В последний день уходящего 2016 года Лимак собирается принять участие в соревновании по спортивному 
программированию. Соревнование начнётся в 20:00 и будет продолжаться четыре часа, то есть ровно до 
полуночи. Участникам будет предложено n задач, упорядоченных по возрастанию сложности, то есть задача 
 будет самой лёгкой, а задача номер n — самой сложной. Лимак знает, что ему потребуется 5·i минут на
   решение i-й задачи.

Друзья Лимака планирую устроить роскошную новогоднюю вечеринку и Лимак хочет прибыть в полночь или 
ранее. Он знает, что ему требуется ровно k минут чтобы добрать до места проведения вечеринки от своего 
дома, где он собирается участвовать в соревновании.

Сколько максимум задач может успеть решить Лимак, так чтобы не опоздать на новогоднюю вечеринку?

Входные данные

В первой строке входных данных записаны два целых числа n и k (1 ≤ n ≤ 10, 1 ≤ k ≤ 240) — 
количество задач в соревновании и количество минут, за которое Лимак доберётся от дома до места
 проведения вечеринки.

Выходные данные

Выведите одно целое число, равное максимальному количеству задач, которое может решить Лимак, 
так чтобы прибыть на новогоднюю вечеринку ровно в полночь или раньше.

Примечание
В первом примере на соревновании участникам предложено 3 задачи и Лимаку требуется 222 минуты, 
чтобы доехать до места проведения вечеринки. Для решения задач требуется 5, 10 и 15 минут соответственно.
 Лимак может решить первые две задачи, потратив на это 5 + 10 = 15 минут, после чего выехать в 20:15 и 
 приехать на вечеринку в 23:57 (через 222 минуты). Таким образом он решит две задачи, но на решение 
 третьей времени уже не хватит и ответ равен 2.

Во втором примере Лимак может решить все 4 задачи за 5 + 10 + 15 + 20 = 50 минут. В 20:50 он сможет
 выехать из дома и прибыть на вечеринку ровно в полночь.

В третьем примере Лимаку нужна только 1 минута, чтобы оказаться на вечеринке, так что ему хватит 
времени для решения всех 7 задач.
"""

# n, k = map(int, input().split())
# c = 0
# d = 0
# s = 0
# while c <= n and s <= 240:
#     c += 1
#     d = d + c * 5
#     s = d + k
# print(c - 1)

"""
Ване на день рождения подарили n кубиков. Он с друзьями решил построить из них пирамиду. Ваня хочет построить пирамиду следующим образом: на верхушке пирамиды должен находиться 1 кубик, на втором уровне — 1 + 2 = 3 кубика, на третьем — 1 + 2 + 3 = 6 кубиков, и так далее. Таким образом, на i-м уровне пирамиды должно располагаться 1 + 2 + ... + (i - 1) + i кубиков.
Ваня хочет узнать, пирамиду какой максимальной высоты он может создать с использованием имеющихся кубиков.

Входные данные
В первой строке записано целое число n (1 ≤ n ≤ 104) — количество кубиков, подаренных Ване.

Выходные данные
Выведите единственной строкой максимально возможную высоту пирамиды.
"""
# n = int(input())
# l = 0
# tn = 0
# while tn + l + 1 <= n:
#     l += 1
#     tn += l
# print(l)

"""или"""

# a=int(input())
# b=0
# c=0
# while c+b+1<=a:
#     b+=1 # текущий уровень пирамиды
#     c+=b # общее количество кубиков, использованных в пирамиде
#     a-=c
# print(b)

"""
Слияние списков
В вашем распоряжении имеется два отсортированных списка по неубыванию элементов, состоящих из n и m 
элементов
Ваша задача слить их в один отсортированный список размером  n + m
Входные данные
Программа получает на вход два числа n и m - количество элементов первого списка и второго списков
Затем с новой строки поступают элементы первого отсортированного списка, а со следующей строки - 
второго списка
Выходные данные
Слить два списка в один в порядке неубывания и вывести элементы полученного списка
P.S: пользоваться встроенной сортировкой запрещено
Примечание: для вывода результирующего списка вы можете использовать следующую конструкцию
print(*result) # где result - итоговый список
"""
# m = list(map(int, input().split()))
# n = list(map(int, input().split()))
# c = m + n
# c.sort()
# print(*c)
"""Т.к sorted/sort запрещено использовать делаем по другому"""
# n, m = (map(int, input().split()))
# a = list(map(int, input().split()))
# b = list(map(int, input().split()))
# i = j = 0
# c = []
# while i<n and j<m:
#     if a[i]<b[j]:
#         c.append(a[i])
#         i += 1
#     else:
#         c.append(b[j])
#         j += 1
# while i<n:
#     c.append(a[i])
#     i += 1
# while j<m:
#     c.append(b[j])
#     j += 1
# print(*c)

"""
По случаю 100500-летия Берляндского государственного университета совсем скоро состоится бал! 
Уже n юношей и m девушек во всю репетируют вальс, менуэт, полонез и кадриль.

Известно, что на бал будут приглашены несколько пар юноша-девушка, причем уровень умений танцевать 
партнеров в каждой паре должен отличаться не более чем на единицу.

Для каждого юноши известен уровень его умения танцевать. Аналогично, для каждой девушки известен 
уровень ее умения танцевать. Напишите программу, которая определит наибольшее количество пар, 
которое можно образовать из n юношей и m девушек.

Входные данные
В первой строке записано целое число n (1 ≤ n ≤ 100) — количество юношей. Вторая строка содержит 
последовательность a1, a2, ..., an (1 ≤ ai ≤ 100), где ai — умение танцевать i-го юноши.

Аналогично, третья строка содержит целое m (1 ≤ m ≤ 100) – количество девушек. В четвертой строке 
содержится последовательность b1, b2, ..., bm (1 ≤ bj ≤ 100), где bj — умение танцевать j-й девушки.

Выходные данные
Выведите единственное число — искомое максимальное возможное количество пар.

Примечание
В первом примере можно сочетать к примеру так 1-1, 4-5, 6-7 либо 2-1, 4-5, 6-7. 
В любом случае можно составить только три пары
"""
# m = int(input()) #количетсво юношей
# a_n = list(map(int, input().split())) #список умений юношей 
# w = int(input()) #количество девушек
# b_n = list(map(int, input().split())) #список умений девушек
# i = j = 0 #указатели юноши = девушки = 0 (старт с 0 индекса списка) 
# count = 0 #счетчик пар 
# a_n.sort(reverse=True) #сортировка умений юношей
# b_n.sort(reverse=True) #соритировка умений девушек

# while i < m and j < w:
#     if abs(a_n[i]-b_n[j]) <=1:
#         count += 1
#         i += 1
#         j += 1
#     elif a_n[i] > b_n[j]:
#         i += 1
#     else:
#         j += 1
# print(count)

"""или"""

# from math import *
# n=int(input())
# n_list=list(map(int,input().split()))[:n]
# m=int(input())
# m_list=list(map(int,input().split()))[:m]
# n_list.sort(reverse=True)
# m_list.sort(reverse=True)
# count=0
# while len(n_list)!=0 and len(m_list)!=0:
#     if (abs(n_list[0]-m_list[0]))>1:
#         if n_list[0]>m_list[0]:
#             n_list.pop(0)
#         else :
#             m_list.pop(0)
#     else:
#         count+=1
#         n_list.pop(0)
#         m_list.pop(0)
# print(count)


"""Программа принимает на вход одно натуральное число и выводит его цифры в столбик в обратном порядке."""
# x = int(input())
# while x>0:
#     print(x % 10)
#     x = x // 10

"""Программа принимает на вход одно натуральное число и выводит на экран сумму цифр данного числа"""
# x = int(input())
# s = 0
# while x>0:
#     s = s + x % 10
#     x = x // 10
# print(s)
   
"""Программа принимает на вход одно натуральное число и выводит на экран произведение цифр данного числа"""
# x = int(input())
# p = 1
# while x>0:
#     last = x % 10
#     p = p * last
#     x = x // 10
# print(p)

"""Программа принимает на вход одно натуральное число и выводит на экран минимальную и максимальную цифры 
данного числа в отдельных строчках"""
# x = int(input())
# x_min = 9
# x_max = 0
# while x>0:
#     last = x % 10
#     if last>x_max:
#         x_max = last
#     if last<x_min:
#         x_min = last
#     x = x // 10
# print(x_min)
# print(x_max)

"""Программа принимает на вход одно натуральное число. Ваша задачи найти сколько раз встречается цифра 7 в этом числе"""
# x = int(input())
# y = 7
# count = 0
# while x>0:
#     last = x % 10
#     if last==y:
#         count += 1
#     x = x // 10
# print(count)

"""Программа принимает на вход одно натуральное число и выводит его цифры в двоичной системе в столбик в обратном порядке."""
# x = int(input())
# while x>0:
#     print(x % 2)
#     x = x // 2

"""
Дано натуральное число N. Определить, является ли оно простым. Натуральное число N называется простым, 
если у него есть только два делителя: единица и само число N. 

В качестве ответа выведите "Yes", если число простое,  "No" - в противном случае.
"""
#Получаем все делители числа
# n = int(input())
# i = 1
# a = []
# while i * i <= n:
#     if n % i == 0:
#         a.append(i)
#         if i != n // i:
#             a.append(n//i)
#     i += 1

# #Если в списке не два делителя - значит чисто не простое
# if len(a) != 2:
#     print('No')
# else:
#     print('Yes')

"""Нахождение всех делителей числа
Программа получает на вход натуральное число N. 
Нужно найти сумму его делителей. 
"""
# n = int(input())
# i = 1
# a = []
# sum = 0
# count = 0
# while i*i<=n: # поиск всех делителей
#     if n % i == 0:
#         a.append(i)
#         if i!=n//i:
#             a.append(n//i)
#     i += 1
# while count<len(a): # поиск суммы делителей занесенных в список
#     sum = sum + a[count]
#     count += 1
# print(sum)
# print(a)


"""Найти наибольшее общее кратное (НОД) алгоритмом Евклида"""

# a = 345
# b = 555
# while b>0:
#     a, b = b, a % b
# print(a)
    

# a, b = map(int, input().split())
# while a!=b:
#     if a > b:
#         a = a - b
#     else:
#         b = b - a
# print(a)

"""Даны два натуральных числа A и B. Требуется найти их наименьшее общее кратное (НОК)."""

# a, b = map(int, input().split())
# c = a * b
# while b>0:
#     a, b = b, a % b
# print(int(c/a))

"""
Программа получает на вход натуральное число n > 1. Выведите минимальный делитель этого числа, отличный от единицы.

К примеру для числа 12 делителями являются 1, 2, 3, 4, 6, 12. 
"""

# n = int(input())
# i = 2
# while n % i != 0:
#     i += 1
# print(i)
"""или"""
# n, d = int(input()), 2
# while n % d: d += 1
# print(d)
     
"""
Давайте переберем все числа от а до b включительно и будем их выводить на экран, при этом нужно выполнить 
следующие условия:

пропускать (не выводить) числа, которые делятся на 2 или на 3
если встречаете число, кратное 777, необходимо принудительно закончить цикл, само это число не выводить
Постарайтесь не использовать цикл for

Формат ввода
Вводится два натуральных числа a и b в отдельных строках. Гарантируется, что a<b.

Формат вывода
Вывести все числа на интервале от a до b включительно согласно условиям в пунктах 1 и 2
"""
# a = int(input())
# b = int(input())
# a = a - 1
# while a!=b:
#     a += 1
#     if a%777==0:
#         break
#     if a%2==0 or a%3==0:
#         continue
#     print(a)
        
"""
Сиракузская последовательность, или последовательность Коллатца, строится так: возьмём натуральное число n; 
если оно чётное, то заменим его числом n/2; если же оно нечётное, то заменим его числом 3n+1. Получившееся число — 
следующее в сиракузской последовательности после числа n. Затем заменяем получившееся число по тому же правилу, 
и так далее.
Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.

Обычно, если проделать такую замену достаточно много раз, мы приходим к числу 1 (за которым следует снова 1). Например: 

8 → 4 → 2 → 1 или 10 → 5 → 16 → 8 → 4 → 2 → 1.

Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.

Если вы обнаружите число, сиракузская последовательность от которого не приходит к 1, то... вы, скорее всего, ошиблись. 
Но если нет, то поздравляем: вы прославитесь, ведь вопрос о том, всегда ли сиракузская последовательность приходит 
к 1 (независимо от начального числа), давно будоражит умы математиков.

Формат ввода
Вводится одно натуральное число n.

Формат вывода
Выводится одно число — количество шагов, необходимое стартующей от n сиракузской последовательности, чтобы впервые 
дойти до 1.
"""
# n = int(input())
# count = 0
# while n!=1:
#     if n==1:
#         break
#     if n%2==0:
#         n = n / 2
#         count += 1
#         continue
#     if n%2!=0:
#         n = (3 * n) + 1
#         count += 1
#         continue
# print(count)

"""
Вам на вход поступает слово и ваша задача в цикле while обойти все его буквы и распечатать их в формате фразы:

«Текущая буква: <letter>».

Как только вы встретите строчные английские буквы «e» или «a» нужно вывести фразу «Ага! Нашлась», 
перестать печатать буквы и принудительно выйти из цикла.

В случае, если в слове не оказалось букв «e» или «a» необходимо вывести фразу «Распечатали все буквы»
"""

# n = str(input())
# i = 0
# while i != len(n):
#     if n[i] == 'e' or n[i] == 'a':
#         print(f'Ага! Нашлась')
#         break   
#     else:
#         print(f'Текущая буква: {n[i]}')
#         i += 1
#         continue
# if i == len(n):
#     print('Распечатали все буквы')

"""или"""
# s, i = input(), 0

# while i < len(s):
#     if s[i] in "ae":
#         print("Ага! Нашлась")
#         break
#     else:
#         print("Текущая буква:", s[i])
#         i += 1
# else:
#     print("Распечатали все буквы")    

"""
Программа принимает на вход натуральное число N. Ваша задача: вывести на экран все числа от 1 до N, каждое число на отдельной строке. 

Sample Input:

3
Sample Output:

1
2
3
"""
# n = int(input())
# for i in range(1, n+1):
#     print(i)

"""
Напишите программу, которая выведет все элементы арифметической прогрессии от 0 до 500 включительно с шагом 5.

Каждый элемент выводится отдельно на своей строке в таком виде
0
5
10
15
...
495
500
"""
# for i in range(0, 505, 5):
#     print(i)

"""
Программа принимает на вход натуральное число N. 
Ваша задача: вывести на экран все числа от N до 1 в сторону уменьшения, каждое число на отдельной строке. 
Sample Input:
3
Sample Output:
3
2
1
"""
# for i in range(int(input()), 0, -1):
#     print(i)
"""или"""
# print(*range(int(input()), 0, -1), sep='\n')

"""
«Надо было брать биткоин в 2012!» именно такую фразу ваша программа должна вывести на экран 13 раз
Формат входных данных
Формат выходных данных
Программа должна вывести 13 раз фразу «Надо было брать биткоин в 2012!», каждый раз на отдельной строке и без кавычек.
"""
# for i in range(13):
#     print('Надо было брать биткоин в 2012!')

"""
Каждый, кто смотрел Симпсонов, помнит, что в начале любой серии Барт писал забавные фразы на доске.
Давайте и мы напишем подобную программу. На вход ей будет поступать фраза и затем количество раз,
которое эту фразу нужно повторить.
"""
# text = str(input())
# n = int(input())
# for i in range(n):
#     print(text)

"""
Напишите программу, которая считывает два натуральных числа a и b (гарантируется, что a<b), после чего для всех чисел от a до b включительно выводит:

“Fizz”, если это число делится на 3;
“Buzz”, если это число делится на 5;
“FizzBuzz”, если выполнены оба предыдущих условия;
само это число в остальных случаях.
Формат ввода
Два числа a и b, каждое на отдельной строке.

Формат вывода
Для всех чисел от a до b напечатайте по одной строке, соответствующей правилам, описанным в условии.
"""
# a = int(input())
# b = int(input())
# for i in range(a, b+1):
#     if i%3==0 and i%5==0:
#         print('FizzBuzz')
#     elif i%3==0:
#         print('Fizz')
#     elif i%5==0:
#         print('Buzz')
#     else:
#         print(i)

"""
Давайте составим сводную информацию о квадратах и кубах интервала чисел.
На вход программе подается два натуральных числа a и b (гарантируется, что a<b), после чего для 
каждого целого числа на интервале от a до b включительно необходимо вывести фразу следующего вида:
«Число {число}; его квадрат = {квадрат}; его куб = {куб}»
Кавычки выводить не нужно и пользуйтесь f-строкой.
Формат входных данных
На вход программе подается два натуральных числа a и b, каждое на отдельной строке.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
"""
# a = int(input())
# b = int(input())
# for i in range(a, b+1):
#     print(f'Число {i}; его квадрат = {i*i}; его куб = {i**3}')

"""
Если перечислить все натуральные числа ниже 10, которые кратны 3 или 5, то получим 3, 5, 6 и 9. Сумма этих чисел 23.
Напишите программу, которая принимает натуральное число n и находит сумму всех чисел ниже 
переданного числа n, которые делятся на 3 или на 5.
"""

# n = int(input())
# s = 0
# for i in range(n-1, 0, -1):
#     if i%3==0 or i%5==0:
#         s = s + i
# print(s)

"""
Напишите программу, которая найдет сумму кубов натуральных чисел от 50 до 100 включительно
"""
# sum = 0
# for i in range(50, 101):
#     sum += i ** 3
# print(sum)

"""
Стандартная задача на нахождения факториала. Факториал числа n! 
n!=1∗2∗3∗...∗n


Входные данные 
Поступает на вход одно целое число n (n>=0)

Выходные данные
Найдите и выведите на экран  n!
"""
# n = int(input())
# fac = 144
# for i in range(1, n + 1):
#     fac = fac * i
# print(fac)

"""или"""
# for i in range(n := 1, int(input()) + 1):
#     n *= i
# print(n)


"""
Мишка — маленький белый медвежонок. А как известно, маленькие медвежата в свободное время любят играть в 
кости на шоколадки. Одним замечательным солнечным утром, гуляя по льдинам, Мишка встретил своего друга Криса, 
которому и предложил сыграть в эту занимательную игру.

Правила её очень просты: сначала определяется значение n — количество раундов игры. В очередном раунде
 каждый из игроков один раз бросает стандартный игральный кубик, на грани которого нанесены различные 
 числа от 1 до 6. Игрок, выбросивший большее значение, становится победителем в раунде. В случае, если 
 выпавшие значения равны, победа не засчитывается никому.

В самой же игре побеждает участник, выигравший в большем количестве раундов. Если же количества побед, 
заслуженных игроками, равны, то объявляется ничья.

Мишка ещё совсем маленький и плохо умеет вести счёт, а потому попросил Вас понаблюдать за ходом игры и 
сообщить ему результат.

Входные данные

В первой строке входных данных содержится число n (1 ≤ n ≤ 100) — количество раундов игры.

Следующие n строк содержат описание раундов. В i-й из них содержится пара целых чисел mi и ci (1 ≤ mi,  ci ≤ 6) — 
результаты бросков Мишки и Криса в i-ом раунде соответственно.

Выходные данные

В случае победы Мишки в единственной строке выведите "Mishka" (без кавычек), а в случае победы Криса выведите "Chris" 
(без кавычек). Если же игра сведётся к ничьей, то выведите "Friendship is magic!^^" (без кавычек).

PS: генерировать случайные числа(пользоваться модулем random) вам не нужно, данные для игры уже готовы. Вам нужно 
только их считать,  и узнать кто же победил
"""
# n = int(input())
# m_count = 0
# k_count = 0
# for i in range(n):
#     m, k = map(int,input().split())
#     if m>k:
#         m_count += 1
#     if m<k:
#         k_count += 1
#     else:
#         m_count += 1
#         k_count += 1
# if m_count>k_count:
#     print('Mishka')
# if k_count>m_count:
#     print('Chris')
# elif m_count==k_count:
#     print('Friendship is magic!^^') 

"""или"""

# print(["Friendship is magic!^^", "Chris", "Mishka"][sum((a < b) - (a > b) for a, b in (map(int, input().split()) for _ in range(int(input()))))])


"""
Найдите, в каких строках из введённых и в каком месте упоминается "рок", причем регистр букв не важен.

Вместо явного цикла прохода по строке в цикле используйте подходящий метод строки.

Формат ввода
На первой строке вводится натуральное число N — количество строк.
Далее следуют N строк.

Формат вывода
Для каждой строки, в которой есть сочетание символов «рок», 
нужно вывести (в порядке появления таких строк) номер этой строки (нумерация начинается с единицы) 
и номер символа, с которого начинается первое вхождение этой подстроки (нумерация символов также с единицы).
"""
# n = int(input())
# for i in range(n):  
#     text = input().lower()
#     if 'рок' in text:
#         print(i+1, text.find('рок')+1)
"""или"""
#[print(i+1,f)for i in range(int(input()))if(f:=input().lower().find('рок')+1)]


