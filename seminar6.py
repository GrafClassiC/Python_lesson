"""Даны два массива чисел. Требуется вывести те элементы
первого массива (в том порядке, в каком они идут в первом
массиве), которых нет во втором массиве. Пользователь вводит
число N - количество элементов в первом массиве, затем N
чисел - элементы массива. Затем число M - количество
элементов во втором массиве. Затем элементы второго массива
Ввод:
7
3 1 3 4 2 4 12
6
4 15 43 1 15 1

Вывод:
3 3 2 12
"""
# "Решение 1: традиционный итератор с функцией append"
# lst1 =  [3, 1, 3, 4, 2, 4, 12]
# lst2 =  [4, 15, 43, 1, 15, 1]
# res = []
# for i in lst1:
#     if i not in lst2:
#         res.append(i)
# print(res)

# "Решение 2:  Списковое включение list comprehension"

# print([i for i in lst1 if i not in lst2])

# "Решение с анонимными функциями"

# print(*list(filter(lambda x: x not in lst2, lst1)))

"""
Дан массив, состоящий из целых чисел. Напишите
программу, которая в данном массиве определит
количество элементов, у которых два соседних и, при
этом, оба соседних элемента меньше данного. Сначала
вводится число N — количество элементов в массиве
Далее записаны N чисел — элементы массива. Массив
состоит из целых чисел.

Ввод:
1 2 3 4 5
Вывод:
0

Ввод:
1 5 1 5 1
Вывод:
2
(каждое число вводится с новой строки)
"""

# lst = [1, 5, 1, 5, 1]
# count = 0
# for i in range(1, len(lst) - 1):
#     if lst[i] > lst[i - 1] and lst[i] > lst[i + 1]:
#         count += 1 
# print(count)

# "или"

# nums = [1, 2, 3, 2, 3, 3, 3, 3]
# my_set = set(nums)
# res = []
# for item in my_set:
#     res.append(nums.count(item) // 2)
# print(sum(res))

# "или"

# print(sum([nums.count(item) // 2 for item in my_set]))

# "или"

# print(sum([nums.count(item) // 2 for item in set(nums)]))

"""
Два различных натуральных числа n и m называются
дружественными, если сумма делителей числа n
(включая 1, но исключая само n) равна числу m и
наоборот. Например, 220 и 284 – дружественные числа.
По данному числу k выведите все пары дружественных
чисел, каждое из которых не превосходит k. Программа
получает на вход одно натуральное число k, не
превосходящее 105
. Программа должна вывести все
пары дружественных чисел, каждое из которых не
превосходит k. Пары необходимо выводить по одной в
строке, разделяя пробелами. Каждая пара должна быть
выведена только один раз (перестановка чисел новую
пару не дает).
Ввод:
300
Вывод:
220 284
"""

def get_sum(n):
    my_sum = 1
    for el in range(2, n):
        if n % el == 0:
            my_sum += el
    return my_sum

def get_friendlies(k):
    lst = []
    for n in range (1, k + 1):
        if n not in lst:
            m = get_sum(n)
            if n == get_sum(m) and n != m:
                lst.append(n)
                lst.append(m)
    return lst

print(get_friendlies(2000))


"""
переделать код под comprehension
values = [True, False, True, None, True]

result = []
for v in values:
if v is True:
result.append('yes')
else:
if v is False:
result.append('no')
else:
result.append('unknown')

print(result)

Перепишите приведенный код на lc
"""
# values = [True, False, True, None, True]
#
# print(["yes" if v is True else "no" if v is False else "unknown" for v in values])

"""
✔ Напишите функцию, которая принимает строку текста.
✔ Сформируйте список с уникальными кодами Unicode каждого
символа введённой строки отсортированный по убыванию.
"""
# def func(data):
#     return sorted(set([ord(el) for el in data]) reverse=True)

# print(func("abrakadabra"))

"""
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и lc.
"""
# print([elem for elem in range(20, 241) if elem % 20 == 0 or elem % 21 == 0])

"""
Представлен список чисел. Необходимо вывести элементы исходного списка,
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].

Реализуйте вариант без lc и с lc
"""

# primary_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

# print([primary_list[i] for i in range(1, len(primary_list)) if primary_list[i] > primary_list[i - 1]])

"""
✔ Функция принимает на вход три списка одинаковой длины:
✔ имена str,
✔ ставка int,
✔ премия str с указанием процентов вида «10.25%».
✔ Вернуть словарь с именем в качестве ключа и суммой
премии в качестве значения.
✔ Сумма рассчитывается как ставка умноженная на процент премии.
"""

# def func(names, salaries, awards):
#     return {name: salary * float(award.rstrip("%")) / 100 for name, salary, award in zip(names, salaries, awards)}

# names = ['Борис', 'Семен', 'Петр', "Сергей"]
# salaries = [10000, 12000, 16000, 14000]
# awards = ['12.35%', '10.25%', '7.75%', '8.85%']

# print(func(names, salaries, awards))


