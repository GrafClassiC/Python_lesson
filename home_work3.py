"""
Требуется вычислить, сколько раз встречается некоторое число k в массиве list_1.

Найдите количество и выведите его.
"""
# list_1 = [1, 2, 3, 4, 5]
# k = 3
# count = list_1.count(k)
# print(count)


# """Этот код создает список `list_1` и переменную `k`, затем использует метод `count()` 
# списка для подсчета количества вхождений числа `k` в список. 
# Результат выводится с помощью функции `print()`."""

"""
Требуется найти в массиве list_1 самый близкий по значению элемент к заданному числу k и вывести его.
Считать, что такой элемент может быть только один. Если значение k совпадает с этим элементом - выведите его.
"""
# list_1 = [1, 2, 3, 4, 5]
# k = 6
# number=0
# for i in range(len(list_1)):
#     if (k-list_1[i])<k-number and k-list_1[i]>0:
#         number=i
# print(list_1[number]) 
"""или""" 
# # Инициализация переменных
# closest_element = None
# min_diff = float('inf')  # Инициализируем бесконечностью

# # Цикл по всем элементам массива
# for element in list_1:
#     # Вычисление разницы между текущим элементом и k
#     diff = abs(k - element)
    
#     # Проверка на обновление самого близкого элемента
#     if diff < min_diff or (diff == min_diff and element == k):
#         min_diff = diff
#         closest_element = element

# # Вывод результата
# print(closest_element)

"""или"""

# m = abs(k - list_1[0])  # модуль числа
# number = list_1[0]
# for i in range(1, len(list_1)):
#     if m > abs(list_1[i] - k):
#         m = abs(list_1[i] - k)
#         number = list_1[i]
# print(number)

"""
В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность.

В случае с английским алфавитом очки распределяются так:

A, E, I, O, U, L, N, S, T, R – 1 очко;
D, G – 2 очка;
B, C, M, P – 3 очка;
F, H, V, W, Y – 4 очка;
K – 5 очков;
J, X – 8 очков;
Q, Z – 10 очков.
А русские буквы оцениваются так:

А, В, Е, И, Н, О, Р, С, Т – 1 очко;
Д, К, Л, М, П, У – 2 очка;
Б, Г, Ё, Ь, Я – 3 очка;
Й, Ы – 4 очка;
Ж, З, Х, Ц, Ч – 5 очков;
Ш, Э, Ю – 8 очков;
Ф, Щ, Ъ – 10 очков.
Напишите программу, которая вычисляет стоимость введенного пользователем слова k и выводит его. 
Будем считать, что на вход подается только одно слово, которое содержит либо только английские, либо только русские буквы.
k = 'ноутбук'
# 12
"""

# def calculate_scrabble_score(word):
#     # Словарь со стоимостью букв для английского и русского алфавитов
#     scores = {
#         'a': 1, 'b': 3, 'c': 3, 'd': 2, 'e': 1, 'f': 4, 'g': 2, 'h': 4, 'i': 1, 'j': 8, 'k': 5, 'l': 1, 'm': 3, 'n': 1, 'o': 1, 'p': 3, 'q': 10, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 4, 'w': 4, 'x': 8, 'y': 4, 'z': 10,
#         'а': 1, 'б': 3, 'в': 1, 'г': 3, 'д': 2, 'е': 1, 'ё': 3, 'ж': 5, 'з': 5, 'и': 1, 'й': 4, 'к': 2, 'л': 2, 'м': 2, 'н': 1, 'о': 1, 'п': 2, 'р': 1, 'с': 1, 'т': 1, 'у': 2, 'ф': 10, 'х': 5, 'ц': 5, 'ч': 5, 'ш': 8, 'щ': 10, 'ъ': 10, 'ы': 4, 'ь': 3, 'э': 8, 'ю': 8, 'я': 3
#     }
    
#     # Приводим слово к нижнему регистру, чтобы корректно обрабатывать буквы
#     word = word.lower()
#     score = 0
    
#     # Суммируем стоимость каждой буквы в слове
#     for letter in word:
#         if letter in scores:
#             score += scores[letter]
    
#     return score

# # Пример использования
# k = 'ноутбук'
# print(calculate_scrabble_score(k))
"""или"""
# points_en = {1: 'AEIOULNSTR', 2: 'DG', 3: 'BCMP', 4: 'FHVWY', 5: 'K', 8: 'JX', 10: 'QZ'}
# points_ru = {1: 'АВЕИНОРСТ', 2: 'ДКЛМПУ', 3: 'БГЁЬЯ', 4: 'ЙЫ', 5: 'ЖЗХЦЧ', 8: 'ШЭЮ', 10: 'ФЩЪ'}
# word = k.upper()  # переводим все буквы в верхний регистр
# count = 0
# for i in word:
#     if i in 'QWERTYUIOPASDFGHJKLZXCVBNM':
#         for j in points_en:
#             if i in points_en[j]:
#                 count = count + j
#     else:
#         for j in points_ru:
#             if i in points_ru[j]:
#                 count = count + j
# print(count)