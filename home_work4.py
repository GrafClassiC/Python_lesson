"""
В фермерском хозяйстве в Карелии выращивают чернику. Черника растет на круглой грядке, и кусты 
черники высажены по окружности грядки. 
Каждый куст черники имеет урожайность, которая соответствует количеству ягод на этом кусте.

Урожайность черничных кустов представлена в виде списка arr, где arr[i] - это урожайность 
(количество ягод) i-го куста.

В фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит
 из управляющего модуля и нескольких собирающих модулей. Каждый собирающий модуль может собрать 
 ягоды с одного куста и с двух соседних кустов. Собирающий модуль находится перед определенным
   кустом, и он может выбирать, с какого куста начать сбор ягод.

Ваша задача - написать программу, которая определит максимальное число ягод, которое может 
собрать один собирающий модуль за один заход, находясь перед некоторым кустом грядки.

Входные данные:

На вход программе подается список arr, где arr[i] (1 ≤ arr[i] ≤ 1000) - урожайность i-го куста 
черники. Размер списка не превышает 1000 элементов.

Выходные данные:

Программа должна вывести одно целое число - максимальное количество ягод, которое может 
собрать собирающий модуль, находясь перед некоторым кустом грядки.
"""
# arr = [5, 8, 6, 4, 9, 2, 7, 3]
# a = len(arr)
# max_arr = 0
# while len(arr)>=3:
#     max1 = arr[0] + arr[1] + arr[2]   
#     del_el = arr.pop(0)
#     if max1>max_arr:
#         max_arr = max1
# else:
#     print(max_arr)

"""или"""
# arr_count = list()
# for i in range(len(arr) - 1):
#     arr_count.append(arr[i - 1] + arr[i] + arr[i + 1])
# arr_count.append(arr[-2] + arr[-1] + arr[0])
# print(max(arr_count))
"""
arr_count = list() - создаем пустой список, в который будем записывать результаты.

for i in range(len(arr) - 1): - запускаем цикл, который будет проходить по всем элементам массива arr, 
кроме последнего.

arr_count.append(arr[i - 1] + arr[i] + arr[i + 1]) - для каждого элемента i вычисляем сумму трех 
последовательных элементов: arr[i-1] + arr[i] + arr[i+1] и добавляем ее в список arr_count.

arr_count.append(arr[-2] + arr[-1] + arr[0]) - после цикла добавляем еще одну сумму, которая включает 
в себя последний элемент массива arr, первый элемент и предпоследний элемент.

Таким образом, в массиве arr_count будут содержаться все суммы трех последовательных элементов исходного 
массива arr.
"""


"""
Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в 
порядке возрастания все те числа, которые встречаются в обоих наборах.
На вход подается 2 числа через пробел: n m
n - кол-во элементов первого множества.
m - кол-во элементов второго множества.
Затем подаются элементы каждого множества через пробел в виде строки. ! Писать input() не надо
Пример
На входе:
var1 = '5 4' # количество элементов первого и второго множества
var2 = '1 3 5 7 9' # элементы первого множества через пробел
var3 = '2 3 4 5' # элементы второго множества через пробел
На выходе:
3 5
"""
# var1 = '5 4'
# var2 = '1 3 5 7 9'
# var3 = '2 3 4 5'

# # Разбиваем строки на списки чисел
# n, m = map(int, var1.split())
# set1 = set(map(int, var2.split()))
# set2 = set(map(int, var3.split()))

# # Находим пересечение множеств и сортируем результат
# result = sorted(set1 & set2)

# # Выводим результат
# print(' '.join(map(str, result)))
"""
Объяснение:

1/Сначала мы разбиваем строки var1, var2 и var3 на списки чисел с помощью функций map() и split().
2/Затем мы создаем множества set1 и set2 из элементов первого и второго наборов соответственно. 
Это позволяет нам избавиться от повторяющихся элементов.
3/Далее мы находим пересечение множеств set1 и set2 с помощью оператора &. 
Это дает нам все числа, которые встречаются в обоих наборах.
4/Наконец, мы сортируем полученный результат в порядке возрастания с помощью функции sorted() 
и выводим его в виде строки, разделенной пробелами.
"""
# mol = [int(x) for x in var1.split()]
# n = mol[0]
# m = mol[1]
# set_1 = set()
# set_2 = set()
# list_1 = list()
# a = [int(x) for x in var2.split()]
# k = set(a)
# for i in k:
#    set_1.add(i)
# b = [int(x) for x in var3.split()]
# k1 = set(b)
# for i in k1:
#    set_2.add(i)
# lok = set_1 & set_2
# kool = list(lok)
# kool.sort()
# for i in kool:
#    print(i, end=' ')
