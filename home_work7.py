"""
Напишите функцию print_operation_table(operation, num_rows, num_columns), которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца. По умолчанию номер столбца и строки = 9.
Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).
Если строк меньше двух, выдайте текст
ОШИБКА! Размерности таблицы должны быть больше 2!.
Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, у операции умножения.

Между элементами должен быть 1 пробел, в конце строки пробел не нужен.

Пример
На входе:
print_operation_table(lambda x, y: x * y, 3, 3)
На выходе:
1 2 3
2 4 6 
3 6 9
"""
# def print_operation_table(operation, num_rows=9, num_columns=9):
#     if num_rows < 2 or num_columns < 2:
#         print("ОШИБКА! Размерности таблицы должны быть больше 2!")
#         return

#     for i in range(1, num_rows + 1):
#         row = []
#         for j in range(1, num_columns + 1):
#             row.append(str(operation(i, j)))
#         print(" ".join(row))


# Сначала мы проверяем, что количество строк и столбцов больше 2. Если нет, то выводим сообщение об ошибке и выходим 
# из функции.
# Затем мы запускаем два вложенных цикла. Внешний цикл перебирает строки, а внутренний - столбцы. Нумерация начинается 
# с 1, так как в условии задачи сказано, что нумерация должна идти с единицы.
# Для каждой ячейки таблицы мы применяем переданную в качестве аргумента функцию operation к текущим значениям строки 
# и столбца, и добавляем результат в список row.
# После заполнения строки, мы объединяем элементы списка row в одну строку, разделенную пробелами, и выводим ее на экран.

# print_operation_table(lambda x, y: x * y, 3, 3)
# Вывод:

# 1 2 3
# 2 4 6
# 3 6 9


"""
Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, Вам стоит написать программу.

Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое.
Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами.
Фразы отделяются друг от друга пробелами.
Стихотворение  Винни-Пух передаст вам автоматически в переменную stroka в виде строки. В ответе напишите Парам пам-пам, если с ритмом все в порядке и Пам парам, если с ритмом все не в порядке.
Если фраза только одна, то ритм определить не получится и необходимо вывести: Количество фраз должно быть больше одной!.
Пример
На входе:
stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'
На выходе:
Парам пам-пам
"""
# def check_rhythm(stroka):
#     phrases = stroka.split()
#     if len(phrases) == 1:
#         return "Количество фраз должно быть больше одной!"
    
#     syllables_count = []
#     for phrase in phrases:
#         phrase_syllables = len([char for char in phrase if char in 'аеёиоуыэюя'])
#         syllables_count.append(phrase_syllables)
    
#     if len(set(syllables_count)) == 1:
#         return "Парам пам-пам"
#     else:
#         return "Пам парам"


# stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'
# print(check_rhythm(stroka))
# Вывод:

# Парам пам-пам
# Объясню, как работает программа:

# используя метод split().
# Если количество фраз равно 1, то мы возвращаем сообщение "Количество фраз должно быть больше одной!".
# Для каждой фразы мы считаем количество гласных букв, используя список comprehension. Это число и будет количеством слогов в фразе.
# Мы собираем все количества слогов в список syllables_count.
# Если все количества слогов одинаковые (т.е. длина уникальных значений в syllables_count равна 1), то мы возвращаем "Парам пам-пам". Иначе возвращаем "Пам парам".
# Надеюсь, все понятно! Если есть вопросы, задавай.

# def check_rhythm(stroka):
#     phrases = stroka.split()
#     if len(phrases) == 1:
#         return "Количество фраз должно быть больше одной!"
    
#     syllable_counts = []
#     for phrase in phrases:
#         words = phrase.split('-')
#         syllables = sum(len(list(filter(lambda x: x in 'аеёиоуыэюя', word))) for word in words)
#         syllable_counts.append(syllables)
    
#     if len(set(syllable_counts)) == 1:
#         return "Парам пам-пам"
#     else:
#         return "Пам парам"


# stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'
# print(check_rhythm(stroka))  # Парам пам-пам

# stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам па'
# print(check_rhythm(stroka))  # Пам парам

# stroka = 'пара-ра-рам'
# print(check_rhythm(stroka))  # Количество фраз должно быть больше одной!
# stroka = 'пара-ра-рам рам-пам-папам па-ра-па'
# def puh(lst):
#     poem = stroka.lower().split()
#     vowels = 'уеыаоэяию'
#     if len(poem) <= 1:
#         return ("Количество фраз должно быть больше одной!")
#     rhyme = list(map(lambda x: sum(x.count(i) for i in vowels), poem))
#     if min(rhyme) == max(rhyme):
#         print('Парам пам-пам')
#     else:
#         print('Пам парам')

# puh(stroka)
# def puh(lst):
#     poem = stroka.lower().split()
#     vowels = 'уеыаоэяию'
#     if len(poem) <= 1:
#         return "Количество фраз должно быть больше одной!"
#     rhyme = list(map(lambda x: sum(x.count(i) for i in vowels), poem))
#     if min(rhyme) == max(rhyme):
#         return('Парам пам-пам')
#     else:
#         return('Пам парам')

# print(puh(stroka))